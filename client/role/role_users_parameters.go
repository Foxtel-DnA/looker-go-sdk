// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRoleUsersParams creates a new RoleUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRoleUsersParams() *RoleUsersParams {
	return &RoleUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRoleUsersParamsWithTimeout creates a new RoleUsersParams object
// with the ability to set a timeout on a request.
func NewRoleUsersParamsWithTimeout(timeout time.Duration) *RoleUsersParams {
	return &RoleUsersParams{
		timeout: timeout,
	}
}

// NewRoleUsersParamsWithContext creates a new RoleUsersParams object
// with the ability to set a context for a request.
func NewRoleUsersParamsWithContext(ctx context.Context) *RoleUsersParams {
	return &RoleUsersParams{
		Context: ctx,
	}
}

// NewRoleUsersParamsWithHTTPClient creates a new RoleUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewRoleUsersParamsWithHTTPClient(client *http.Client) *RoleUsersParams {
	return &RoleUsersParams{
		HTTPClient: client,
	}
}

/* RoleUsersParams contains all the parameters to send to the API endpoint
   for the role users operation.

   Typically these are written to a http.Request.
*/
type RoleUsersParams struct {

	/* DirectAssociationOnly.

	   Get only users associated directly with the role: exclude those only associated through groups.
	*/
	DirectAssociationOnly *bool

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	/* RoleID.

	   id of user

	   Format: int64
	*/
	RoleID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the role users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoleUsersParams) WithDefaults() *RoleUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the role users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoleUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the role users params
func (o *RoleUsersParams) WithTimeout(timeout time.Duration) *RoleUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the role users params
func (o *RoleUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the role users params
func (o *RoleUsersParams) WithContext(ctx context.Context) *RoleUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the role users params
func (o *RoleUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the role users params
func (o *RoleUsersParams) WithHTTPClient(client *http.Client) *RoleUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the role users params
func (o *RoleUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectAssociationOnly adds the directAssociationOnly to the role users params
func (o *RoleUsersParams) WithDirectAssociationOnly(directAssociationOnly *bool) *RoleUsersParams {
	o.SetDirectAssociationOnly(directAssociationOnly)
	return o
}

// SetDirectAssociationOnly adds the directAssociationOnly to the role users params
func (o *RoleUsersParams) SetDirectAssociationOnly(directAssociationOnly *bool) {
	o.DirectAssociationOnly = directAssociationOnly
}

// WithFields adds the fields to the role users params
func (o *RoleUsersParams) WithFields(fields *string) *RoleUsersParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the role users params
func (o *RoleUsersParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithRoleID adds the roleID to the role users params
func (o *RoleUsersParams) WithRoleID(roleID int64) *RoleUsersParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the role users params
func (o *RoleUsersParams) SetRoleID(roleID int64) {
	o.RoleID = roleID
}

// WriteToRequest writes these params to a swagger request
func (o *RoleUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DirectAssociationOnly != nil {

		// query param direct_association_only
		var qrDirectAssociationOnly bool

		if o.DirectAssociationOnly != nil {
			qrDirectAssociationOnly = *o.DirectAssociationOnly
		}
		qDirectAssociationOnly := swag.FormatBool(qrDirectAssociationOnly)
		if qDirectAssociationOnly != "" {

			if err := r.SetQueryParam("direct_association_only", qDirectAssociationOnly); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	// path param role_id
	if err := r.SetPathParam("role_id", swag.FormatInt64(o.RoleID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
