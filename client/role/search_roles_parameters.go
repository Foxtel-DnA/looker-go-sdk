// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchRolesParams creates a new SearchRolesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchRolesParams() *SearchRolesParams {
	return &SearchRolesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchRolesParamsWithTimeout creates a new SearchRolesParams object
// with the ability to set a timeout on a request.
func NewSearchRolesParamsWithTimeout(timeout time.Duration) *SearchRolesParams {
	return &SearchRolesParams{
		timeout: timeout,
	}
}

// NewSearchRolesParamsWithContext creates a new SearchRolesParams object
// with the ability to set a context for a request.
func NewSearchRolesParamsWithContext(ctx context.Context) *SearchRolesParams {
	return &SearchRolesParams{
		Context: ctx,
	}
}

// NewSearchRolesParamsWithHTTPClient creates a new SearchRolesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchRolesParamsWithHTTPClient(client *http.Client) *SearchRolesParams {
	return &SearchRolesParams{
		HTTPClient: client,
	}
}

/* SearchRolesParams contains all the parameters to send to the API endpoint
   for the search roles operation.

   Typically these are written to a http.Request.
*/
type SearchRolesParams struct {

	/* BuiltIn.

	   Match roles by built_in status.
	*/
	BuiltIn *bool

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	/* FilterOr.

	   Combine given search criteria in a boolean OR expression.
	*/
	FilterOr *bool

	/* ID.

	   Match role id.

	   Format: int64
	*/
	ID *int64

	/* Limit.

	   Number of results to return (used with `offset`).

	   Format: int64
	*/
	Limit *int64

	/* Name.

	   Match role name.
	*/
	Name *string

	/* Offset.

	   Number of results to skip before returning any (used with `limit`).

	   Format: int64
	*/
	Offset *int64

	/* Sorts.

	   Fields to sort by.
	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRolesParams) WithDefaults() *SearchRolesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search roles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchRolesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search roles params
func (o *SearchRolesParams) WithTimeout(timeout time.Duration) *SearchRolesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search roles params
func (o *SearchRolesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search roles params
func (o *SearchRolesParams) WithContext(ctx context.Context) *SearchRolesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search roles params
func (o *SearchRolesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search roles params
func (o *SearchRolesParams) WithHTTPClient(client *http.Client) *SearchRolesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search roles params
func (o *SearchRolesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuiltIn adds the builtIn to the search roles params
func (o *SearchRolesParams) WithBuiltIn(builtIn *bool) *SearchRolesParams {
	o.SetBuiltIn(builtIn)
	return o
}

// SetBuiltIn adds the builtIn to the search roles params
func (o *SearchRolesParams) SetBuiltIn(builtIn *bool) {
	o.BuiltIn = builtIn
}

// WithFields adds the fields to the search roles params
func (o *SearchRolesParams) WithFields(fields *string) *SearchRolesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the search roles params
func (o *SearchRolesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFilterOr adds the filterOr to the search roles params
func (o *SearchRolesParams) WithFilterOr(filterOr *bool) *SearchRolesParams {
	o.SetFilterOr(filterOr)
	return o
}

// SetFilterOr adds the filterOr to the search roles params
func (o *SearchRolesParams) SetFilterOr(filterOr *bool) {
	o.FilterOr = filterOr
}

// WithID adds the id to the search roles params
func (o *SearchRolesParams) WithID(id *int64) *SearchRolesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the search roles params
func (o *SearchRolesParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the search roles params
func (o *SearchRolesParams) WithLimit(limit *int64) *SearchRolesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search roles params
func (o *SearchRolesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the search roles params
func (o *SearchRolesParams) WithName(name *string) *SearchRolesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the search roles params
func (o *SearchRolesParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the search roles params
func (o *SearchRolesParams) WithOffset(offset *int64) *SearchRolesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search roles params
func (o *SearchRolesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSorts adds the sorts to the search roles params
func (o *SearchRolesParams) WithSorts(sorts *string) *SearchRolesParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the search roles params
func (o *SearchRolesParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *SearchRolesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BuiltIn != nil {

		// query param built_in
		var qrBuiltIn bool

		if o.BuiltIn != nil {
			qrBuiltIn = *o.BuiltIn
		}
		qBuiltIn := swag.FormatBool(qrBuiltIn)
		if qBuiltIn != "" {

			if err := r.SetQueryParam("built_in", qBuiltIn); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.FilterOr != nil {

		// query param filter_or
		var qrFilterOr bool

		if o.FilterOr != nil {
			qrFilterOr = *o.FilterOr
		}
		qFilterOr := swag.FormatBool(qrFilterOr)
		if qFilterOr != "" {

			if err := r.SetQueryParam("filter_or", qFilterOr); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string

		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {

			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
