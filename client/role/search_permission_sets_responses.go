// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Foxtel-DnA/looker-go-sdk/models"
)

// SearchPermissionSetsReader is a Reader for the SearchPermissionSets structure.
type SearchPermissionSetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchPermissionSetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchPermissionSetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchPermissionSetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchPermissionSetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchPermissionSetsOK creates a SearchPermissionSetsOK with default headers values
func NewSearchPermissionSetsOK() *SearchPermissionSetsOK {
	return &SearchPermissionSetsOK{}
}

/* SearchPermissionSetsOK describes a response with status code 200, with default header values.

Permission Set
*/
type SearchPermissionSetsOK struct {
	Payload []*models.PermissionSet
}

func (o *SearchPermissionSetsOK) Error() string {
	return fmt.Sprintf("[GET /permission_sets/search][%d] searchPermissionSetsOK  %+v", 200, o.Payload)
}
func (o *SearchPermissionSetsOK) GetPayload() []*models.PermissionSet {
	return o.Payload
}

func (o *SearchPermissionSetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPermissionSetsBadRequest creates a SearchPermissionSetsBadRequest with default headers values
func NewSearchPermissionSetsBadRequest() *SearchPermissionSetsBadRequest {
	return &SearchPermissionSetsBadRequest{}
}

/* SearchPermissionSetsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchPermissionSetsBadRequest struct {
	Payload *models.Error
}

func (o *SearchPermissionSetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /permission_sets/search][%d] searchPermissionSetsBadRequest  %+v", 400, o.Payload)
}
func (o *SearchPermissionSetsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchPermissionSetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPermissionSetsNotFound creates a SearchPermissionSetsNotFound with default headers values
func NewSearchPermissionSetsNotFound() *SearchPermissionSetsNotFound {
	return &SearchPermissionSetsNotFound{}
}

/* SearchPermissionSetsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchPermissionSetsNotFound struct {
	Payload *models.Error
}

func (o *SearchPermissionSetsNotFound) Error() string {
	return fmt.Sprintf("[GET /permission_sets/search][%d] searchPermissionSetsNotFound  %+v", 404, o.Payload)
}
func (o *SearchPermissionSetsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SearchPermissionSetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
