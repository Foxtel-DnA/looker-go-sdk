// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryTaskMultiResultsParams creates a new QueryTaskMultiResultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryTaskMultiResultsParams() *QueryTaskMultiResultsParams {
	return &QueryTaskMultiResultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryTaskMultiResultsParamsWithTimeout creates a new QueryTaskMultiResultsParams object
// with the ability to set a timeout on a request.
func NewQueryTaskMultiResultsParamsWithTimeout(timeout time.Duration) *QueryTaskMultiResultsParams {
	return &QueryTaskMultiResultsParams{
		timeout: timeout,
	}
}

// NewQueryTaskMultiResultsParamsWithContext creates a new QueryTaskMultiResultsParams object
// with the ability to set a context for a request.
func NewQueryTaskMultiResultsParamsWithContext(ctx context.Context) *QueryTaskMultiResultsParams {
	return &QueryTaskMultiResultsParams{
		Context: ctx,
	}
}

// NewQueryTaskMultiResultsParamsWithHTTPClient creates a new QueryTaskMultiResultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryTaskMultiResultsParamsWithHTTPClient(client *http.Client) *QueryTaskMultiResultsParams {
	return &QueryTaskMultiResultsParams{
		HTTPClient: client,
	}
}

/* QueryTaskMultiResultsParams contains all the parameters to send to the API endpoint
   for the query task multi results operation.

   Typically these are written to a http.Request.
*/
type QueryTaskMultiResultsParams struct {

	/* QueryTaskIds.

	   List of Query Task IDs
	*/
	QueryTaskIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query task multi results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryTaskMultiResultsParams) WithDefaults() *QueryTaskMultiResultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query task multi results params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryTaskMultiResultsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query task multi results params
func (o *QueryTaskMultiResultsParams) WithTimeout(timeout time.Duration) *QueryTaskMultiResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query task multi results params
func (o *QueryTaskMultiResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query task multi results params
func (o *QueryTaskMultiResultsParams) WithContext(ctx context.Context) *QueryTaskMultiResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query task multi results params
func (o *QueryTaskMultiResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query task multi results params
func (o *QueryTaskMultiResultsParams) WithHTTPClient(client *http.Client) *QueryTaskMultiResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query task multi results params
func (o *QueryTaskMultiResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQueryTaskIds adds the queryTaskIds to the query task multi results params
func (o *QueryTaskMultiResultsParams) WithQueryTaskIds(queryTaskIds []string) *QueryTaskMultiResultsParams {
	o.SetQueryTaskIds(queryTaskIds)
	return o
}

// SetQueryTaskIds adds the queryTaskIds to the query task multi results params
func (o *QueryTaskMultiResultsParams) SetQueryTaskIds(queryTaskIds []string) {
	o.QueryTaskIds = queryTaskIds
}

// WriteToRequest writes these params to a swagger request
func (o *QueryTaskMultiResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.QueryTaskIds != nil {

		// binding items for query_task_ids
		joinedQueryTaskIds := o.bindParamQueryTaskIds(reg)

		// query array param query_task_ids
		if err := r.SetQueryParam("query_task_ids", joinedQueryTaskIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamQueryTaskMultiResults binds the parameter query_task_ids
func (o *QueryTaskMultiResultsParams) bindParamQueryTaskIds(formats strfmt.Registry) []string {
	queryTaskIdsIR := o.QueryTaskIds

	var queryTaskIdsIC []string
	for _, queryTaskIdsIIR := range queryTaskIdsIR { // explode []string

		queryTaskIdsIIV := queryTaskIdsIIR // string as string
		queryTaskIdsIC = append(queryTaskIdsIC, queryTaskIdsIIV)
	}

	// items.CollectionFormat: "csv"
	queryTaskIdsIS := swag.JoinByFormat(queryTaskIdsIC, "csv")

	return queryTaskIdsIS
}
