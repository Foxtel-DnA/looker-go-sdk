// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/billtrust/looker-go-sdk/models"
)

// QueryReader is a Reader for the Query structure.
type QueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryOK creates a QueryOK with default headers values
func NewQueryOK() *QueryOK {
	return &QueryOK{}
}

/* QueryOK describes a response with status code 200, with default header values.

Query
*/
type QueryOK struct {
	Payload *models.Query
}

func (o *QueryOK) Error() string {
	return fmt.Sprintf("[GET /queries/{query_id}][%d] queryOK  %+v", 200, o.Payload)
}
func (o *QueryOK) GetPayload() *models.Query {
	return o.Payload
}

func (o *QueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Query)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryBadRequest creates a QueryBadRequest with default headers values
func NewQueryBadRequest() *QueryBadRequest {
	return &QueryBadRequest{}
}

/* QueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryBadRequest struct {
	Payload *models.Error
}

func (o *QueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /queries/{query_id}][%d] queryBadRequest  %+v", 400, o.Payload)
}
func (o *QueryBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryNotFound creates a QueryNotFound with default headers values
func NewQueryNotFound() *QueryNotFound {
	return &QueryNotFound{}
}

/* QueryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type QueryNotFound struct {
	Payload *models.Error
}

func (o *QueryNotFound) Error() string {
	return fmt.Sprintf("[GET /queries/{query_id}][%d] queryNotFound  %+v", 404, o.Payload)
}
func (o *QueryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *QueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
