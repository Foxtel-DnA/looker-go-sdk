// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"your-damain.com/swagger/looker-api-golang/models"
)

// NewUpdateDashboardFilterParams creates a new UpdateDashboardFilterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateDashboardFilterParams() *UpdateDashboardFilterParams {
	return &UpdateDashboardFilterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateDashboardFilterParamsWithTimeout creates a new UpdateDashboardFilterParams object
// with the ability to set a timeout on a request.
func NewUpdateDashboardFilterParamsWithTimeout(timeout time.Duration) *UpdateDashboardFilterParams {
	return &UpdateDashboardFilterParams{
		timeout: timeout,
	}
}

// NewUpdateDashboardFilterParamsWithContext creates a new UpdateDashboardFilterParams object
// with the ability to set a context for a request.
func NewUpdateDashboardFilterParamsWithContext(ctx context.Context) *UpdateDashboardFilterParams {
	return &UpdateDashboardFilterParams{
		Context: ctx,
	}
}

// NewUpdateDashboardFilterParamsWithHTTPClient creates a new UpdateDashboardFilterParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateDashboardFilterParamsWithHTTPClient(client *http.Client) *UpdateDashboardFilterParams {
	return &UpdateDashboardFilterParams{
		HTTPClient: client,
	}
}

/* UpdateDashboardFilterParams contains all the parameters to send to the API endpoint
   for the update dashboard filter operation.

   Typically these are written to a http.Request.
*/
type UpdateDashboardFilterParams struct {

	/* Body.

	   Dashboard Filter
	*/
	Body *models.DashboardFilter

	/* DashboardFilterID.

	   Id of dashboard filter
	*/
	DashboardFilterID string

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update dashboard filter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDashboardFilterParams) WithDefaults() *UpdateDashboardFilterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update dashboard filter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateDashboardFilterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithTimeout(timeout time.Duration) *UpdateDashboardFilterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithContext(ctx context.Context) *UpdateDashboardFilterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithHTTPClient(client *http.Client) *UpdateDashboardFilterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithBody(body *models.DashboardFilter) *UpdateDashboardFilterParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetBody(body *models.DashboardFilter) {
	o.Body = body
}

// WithDashboardFilterID adds the dashboardFilterID to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithDashboardFilterID(dashboardFilterID string) *UpdateDashboardFilterParams {
	o.SetDashboardFilterID(dashboardFilterID)
	return o
}

// SetDashboardFilterID adds the dashboardFilterId to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetDashboardFilterID(dashboardFilterID string) {
	o.DashboardFilterID = dashboardFilterID
}

// WithFields adds the fields to the update dashboard filter params
func (o *UpdateDashboardFilterParams) WithFields(fields *string) *UpdateDashboardFilterParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the update dashboard filter params
func (o *UpdateDashboardFilterParams) SetFields(fields *string) {
	o.Fields = fields
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateDashboardFilterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param dashboard_filter_id
	if err := r.SetPathParam("dashboard_filter_id", o.DashboardFilterID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
