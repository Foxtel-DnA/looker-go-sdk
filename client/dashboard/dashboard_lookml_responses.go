// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/billtrust/looker-go-sdk/models"
)

// DashboardLookmlReader is a Reader for the DashboardLookml structure.
type DashboardLookmlReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DashboardLookmlReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDashboardLookmlOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDashboardLookmlBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDashboardLookmlNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDashboardLookmlOK creates a DashboardLookmlOK with default headers values
func NewDashboardLookmlOK() *DashboardLookmlOK {
	return &DashboardLookmlOK{}
}

/* DashboardLookmlOK describes a response with status code 200, with default header values.

json of dashboard
*/
type DashboardLookmlOK struct {
	Payload *models.DashboardLookml
}

func (o *DashboardLookmlOK) Error() string {
	return fmt.Sprintf("[GET /dashboards/lookml/{dashboard_id}][%d] dashboardLookmlOK  %+v", 200, o.Payload)
}
func (o *DashboardLookmlOK) GetPayload() *models.DashboardLookml {
	return o.Payload
}

func (o *DashboardLookmlOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DashboardLookml)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardLookmlBadRequest creates a DashboardLookmlBadRequest with default headers values
func NewDashboardLookmlBadRequest() *DashboardLookmlBadRequest {
	return &DashboardLookmlBadRequest{}
}

/* DashboardLookmlBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DashboardLookmlBadRequest struct {
	Payload *models.Error
}

func (o *DashboardLookmlBadRequest) Error() string {
	return fmt.Sprintf("[GET /dashboards/lookml/{dashboard_id}][%d] dashboardLookmlBadRequest  %+v", 400, o.Payload)
}
func (o *DashboardLookmlBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DashboardLookmlBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardLookmlNotFound creates a DashboardLookmlNotFound with default headers values
func NewDashboardLookmlNotFound() *DashboardLookmlNotFound {
	return &DashboardLookmlNotFound{}
}

/* DashboardLookmlNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DashboardLookmlNotFound struct {
	Payload *models.Error
}

func (o *DashboardLookmlNotFound) Error() string {
	return fmt.Sprintf("[GET /dashboards/lookml/{dashboard_id}][%d] dashboardLookmlNotFound  %+v", 404, o.Payload)
}
func (o *DashboardLookmlNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DashboardLookmlNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
