// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAllUsersParams creates a new AllUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAllUsersParams() *AllUsersParams {
	return &AllUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAllUsersParamsWithTimeout creates a new AllUsersParams object
// with the ability to set a timeout on a request.
func NewAllUsersParamsWithTimeout(timeout time.Duration) *AllUsersParams {
	return &AllUsersParams{
		timeout: timeout,
	}
}

// NewAllUsersParamsWithContext creates a new AllUsersParams object
// with the ability to set a context for a request.
func NewAllUsersParamsWithContext(ctx context.Context) *AllUsersParams {
	return &AllUsersParams{
		Context: ctx,
	}
}

// NewAllUsersParamsWithHTTPClient creates a new AllUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewAllUsersParamsWithHTTPClient(client *http.Client) *AllUsersParams {
	return &AllUsersParams{
		HTTPClient: client,
	}
}

/* AllUsersParams contains all the parameters to send to the API endpoint
   for the all users operation.

   Typically these are written to a http.Request.
*/
type AllUsersParams struct {

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	/* Ids.

	   Optional list of ids to get specific users.
	*/
	Ids []int64

	/* Page.

	   Requested page.

	   Format: int64
	*/
	Page *int64

	/* PerPage.

	   Results per page.

	   Format: int64
	*/
	PerPage *int64

	/* Sorts.

	   Fields to sort by.
	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the all users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AllUsersParams) WithDefaults() *AllUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the all users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AllUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the all users params
func (o *AllUsersParams) WithTimeout(timeout time.Duration) *AllUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the all users params
func (o *AllUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the all users params
func (o *AllUsersParams) WithContext(ctx context.Context) *AllUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the all users params
func (o *AllUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the all users params
func (o *AllUsersParams) WithHTTPClient(client *http.Client) *AllUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the all users params
func (o *AllUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the all users params
func (o *AllUsersParams) WithFields(fields *string) *AllUsersParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the all users params
func (o *AllUsersParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithIds adds the ids to the all users params
func (o *AllUsersParams) WithIds(ids []int64) *AllUsersParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the all users params
func (o *AllUsersParams) SetIds(ids []int64) {
	o.Ids = ids
}

// WithPage adds the page to the all users params
func (o *AllUsersParams) WithPage(page *int64) *AllUsersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the all users params
func (o *AllUsersParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the all users params
func (o *AllUsersParams) WithPerPage(perPage *int64) *AllUsersParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the all users params
func (o *AllUsersParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSorts adds the sorts to the all users params
func (o *AllUsersParams) WithSorts(sorts *string) *AllUsersParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the all users params
func (o *AllUsersParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *AllUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string

		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {

			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamAllUsers binds the parameter ids
func (o *AllUsersParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []int64

		idsIIV := swag.FormatInt64(idsIIR) // int64 as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: "csv"
	idsIS := swag.JoinByFormat(idsIC, "csv")

	return idsIS
}
