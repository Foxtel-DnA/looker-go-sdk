// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/billtrust/looker-go-sdk/models"
)

// UserCredentialsOidcReader is a Reader for the UserCredentialsOidc structure.
type UserCredentialsOidcReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCredentialsOidcReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserCredentialsOidcOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserCredentialsOidcBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserCredentialsOidcNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserCredentialsOidcOK creates a UserCredentialsOidcOK with default headers values
func NewUserCredentialsOidcOK() *UserCredentialsOidcOK {
	return &UserCredentialsOidcOK{}
}

/* UserCredentialsOidcOK describes a response with status code 200, with default header values.

OIDC Auth Credential
*/
type UserCredentialsOidcOK struct {
	Payload *models.CredentialsOIDC
}

func (o *UserCredentialsOidcOK) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_oidc][%d] userCredentialsOidcOK  %+v", 200, o.Payload)
}
func (o *UserCredentialsOidcOK) GetPayload() *models.CredentialsOIDC {
	return o.Payload
}

func (o *UserCredentialsOidcOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsOIDC)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCredentialsOidcBadRequest creates a UserCredentialsOidcBadRequest with default headers values
func NewUserCredentialsOidcBadRequest() *UserCredentialsOidcBadRequest {
	return &UserCredentialsOidcBadRequest{}
}

/* UserCredentialsOidcBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserCredentialsOidcBadRequest struct {
	Payload *models.Error
}

func (o *UserCredentialsOidcBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_oidc][%d] userCredentialsOidcBadRequest  %+v", 400, o.Payload)
}
func (o *UserCredentialsOidcBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UserCredentialsOidcBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCredentialsOidcNotFound creates a UserCredentialsOidcNotFound with default headers values
func NewUserCredentialsOidcNotFound() *UserCredentialsOidcNotFound {
	return &UserCredentialsOidcNotFound{}
}

/* UserCredentialsOidcNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserCredentialsOidcNotFound struct {
	Payload *models.Error
}

func (o *UserCredentialsOidcNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user_id}/credentials_oidc][%d] userCredentialsOidcNotFound  %+v", 404, o.Payload)
}
func (o *UserCredentialsOidcNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UserCredentialsOidcNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
