// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"your-damain.com/swagger/looker-api-golang/models"
)

// NewCreateUserCredentialsTotpParams creates a new CreateUserCredentialsTotpParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateUserCredentialsTotpParams() *CreateUserCredentialsTotpParams {
	return &CreateUserCredentialsTotpParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateUserCredentialsTotpParamsWithTimeout creates a new CreateUserCredentialsTotpParams object
// with the ability to set a timeout on a request.
func NewCreateUserCredentialsTotpParamsWithTimeout(timeout time.Duration) *CreateUserCredentialsTotpParams {
	return &CreateUserCredentialsTotpParams{
		timeout: timeout,
	}
}

// NewCreateUserCredentialsTotpParamsWithContext creates a new CreateUserCredentialsTotpParams object
// with the ability to set a context for a request.
func NewCreateUserCredentialsTotpParamsWithContext(ctx context.Context) *CreateUserCredentialsTotpParams {
	return &CreateUserCredentialsTotpParams{
		Context: ctx,
	}
}

// NewCreateUserCredentialsTotpParamsWithHTTPClient creates a new CreateUserCredentialsTotpParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateUserCredentialsTotpParamsWithHTTPClient(client *http.Client) *CreateUserCredentialsTotpParams {
	return &CreateUserCredentialsTotpParams{
		HTTPClient: client,
	}
}

/* CreateUserCredentialsTotpParams contains all the parameters to send to the API endpoint
   for the create user credentials totp operation.

   Typically these are written to a http.Request.
*/
type CreateUserCredentialsTotpParams struct {

	/* Body.

	   Two-Factor Credential
	*/
	Body *models.CredentialsTotp

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	/* UserID.

	   id of user

	   Format: int64
	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create user credentials totp params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUserCredentialsTotpParams) WithDefaults() *CreateUserCredentialsTotpParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create user credentials totp params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUserCredentialsTotpParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithTimeout(timeout time.Duration) *CreateUserCredentialsTotpParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithContext(ctx context.Context) *CreateUserCredentialsTotpParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithHTTPClient(client *http.Client) *CreateUserCredentialsTotpParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithBody(body *models.CredentialsTotp) *CreateUserCredentialsTotpParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetBody(body *models.CredentialsTotp) {
	o.Body = body
}

// WithFields adds the fields to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithFields(fields *string) *CreateUserCredentialsTotpParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithUserID adds the userID to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) WithUserID(userID int64) *CreateUserCredentialsTotpParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the create user credentials totp params
func (o *CreateUserCredentialsTotpParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateUserCredentialsTotpParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	// path param user_id
	if err := r.SetPathParam("user_id", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
