// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"your-damain.com/swagger/looker-api-golang/models"
)

// DeleteGitBranchReader is a Reader for the DeleteGitBranch structure.
type DeleteGitBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteGitBranchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteGitBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteGitBranchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteGitBranchNoContent creates a DeleteGitBranchNoContent with default headers values
func NewDeleteGitBranchNoContent() *DeleteGitBranchNoContent {
	return &DeleteGitBranchNoContent{}
}

/* DeleteGitBranchNoContent describes a response with status code 204, with default header values.

Successfully deleted.
*/
type DeleteGitBranchNoContent struct {
	Payload string
}

func (o *DeleteGitBranchNoContent) Error() string {
	return fmt.Sprintf("[DELETE /projects/{project_id}/git_branch/{branch_name}][%d] deleteGitBranchNoContent  %+v", 204, o.Payload)
}
func (o *DeleteGitBranchNoContent) GetPayload() string {
	return o.Payload
}

func (o *DeleteGitBranchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitBranchBadRequest creates a DeleteGitBranchBadRequest with default headers values
func NewDeleteGitBranchBadRequest() *DeleteGitBranchBadRequest {
	return &DeleteGitBranchBadRequest{}
}

/* DeleteGitBranchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteGitBranchBadRequest struct {
	Payload *models.Error
}

func (o *DeleteGitBranchBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /projects/{project_id}/git_branch/{branch_name}][%d] deleteGitBranchBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteGitBranchBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitBranchNotFound creates a DeleteGitBranchNotFound with default headers values
func NewDeleteGitBranchNotFound() *DeleteGitBranchNotFound {
	return &DeleteGitBranchNotFound{}
}

/* DeleteGitBranchNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteGitBranchNotFound struct {
	Payload *models.Error
}

func (o *DeleteGitBranchNotFound) Error() string {
	return fmt.Sprintf("[DELETE /projects/{project_id}/git_branch/{branch_name}][%d] deleteGitBranchNotFound  %+v", 404, o.Payload)
}
func (o *DeleteGitBranchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitBranchTooManyRequests creates a DeleteGitBranchTooManyRequests with default headers values
func NewDeleteGitBranchTooManyRequests() *DeleteGitBranchTooManyRequests {
	return &DeleteGitBranchTooManyRequests{}
}

/* DeleteGitBranchTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type DeleteGitBranchTooManyRequests struct {
	Payload *models.Error
}

func (o *DeleteGitBranchTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /projects/{project_id}/git_branch/{branch_name}][%d] deleteGitBranchTooManyRequests  %+v", 429, o.Payload)
}
func (o *DeleteGitBranchTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteGitBranchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
