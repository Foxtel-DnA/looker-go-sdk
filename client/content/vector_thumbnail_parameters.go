// Code generated by go-swagger; DO NOT EDIT.

package content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewVectorThumbnailParams creates a new VectorThumbnailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVectorThumbnailParams() *VectorThumbnailParams {
	return &VectorThumbnailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVectorThumbnailParamsWithTimeout creates a new VectorThumbnailParams object
// with the ability to set a timeout on a request.
func NewVectorThumbnailParamsWithTimeout(timeout time.Duration) *VectorThumbnailParams {
	return &VectorThumbnailParams{
		timeout: timeout,
	}
}

// NewVectorThumbnailParamsWithContext creates a new VectorThumbnailParams object
// with the ability to set a context for a request.
func NewVectorThumbnailParamsWithContext(ctx context.Context) *VectorThumbnailParams {
	return &VectorThumbnailParams{
		Context: ctx,
	}
}

// NewVectorThumbnailParamsWithHTTPClient creates a new VectorThumbnailParams object
// with the ability to set a custom HTTPClient for a request.
func NewVectorThumbnailParamsWithHTTPClient(client *http.Client) *VectorThumbnailParams {
	return &VectorThumbnailParams{
		HTTPClient: client,
	}
}

/* VectorThumbnailParams contains all the parameters to send to the API endpoint
   for the vector thumbnail operation.

   Typically these are written to a http.Request.
*/
type VectorThumbnailParams struct {

	/* Reload.

	   Whether or not to refresh the rendered image with the latest content
	*/
	Reload *string

	/* ResourceID.

	   ID of the dashboard or look to render
	*/
	ResourceID string

	/* Type.

	   Either dashboard or look
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the vector thumbnail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VectorThumbnailParams) WithDefaults() *VectorThumbnailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the vector thumbnail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VectorThumbnailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the vector thumbnail params
func (o *VectorThumbnailParams) WithTimeout(timeout time.Duration) *VectorThumbnailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the vector thumbnail params
func (o *VectorThumbnailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the vector thumbnail params
func (o *VectorThumbnailParams) WithContext(ctx context.Context) *VectorThumbnailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the vector thumbnail params
func (o *VectorThumbnailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the vector thumbnail params
func (o *VectorThumbnailParams) WithHTTPClient(client *http.Client) *VectorThumbnailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the vector thumbnail params
func (o *VectorThumbnailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReload adds the reload to the vector thumbnail params
func (o *VectorThumbnailParams) WithReload(reload *string) *VectorThumbnailParams {
	o.SetReload(reload)
	return o
}

// SetReload adds the reload to the vector thumbnail params
func (o *VectorThumbnailParams) SetReload(reload *string) {
	o.Reload = reload
}

// WithResourceID adds the resourceID to the vector thumbnail params
func (o *VectorThumbnailParams) WithResourceID(resourceID string) *VectorThumbnailParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the vector thumbnail params
func (o *VectorThumbnailParams) SetResourceID(resourceID string) {
	o.ResourceID = resourceID
}

// WithType adds the typeVar to the vector thumbnail params
func (o *VectorThumbnailParams) WithType(typeVar string) *VectorThumbnailParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the vector thumbnail params
func (o *VectorThumbnailParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *VectorThumbnailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Reload != nil {

		// query param reload
		var qrReload string

		if o.Reload != nil {
			qrReload = *o.Reload
		}
		qReload := qrReload
		if qReload != "" {

			if err := r.SetQueryParam("reload", qReload); err != nil {
				return err
			}
		}
	}

	// path param resource_id
	if err := r.SetPathParam("resource_id", o.ResourceID); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
