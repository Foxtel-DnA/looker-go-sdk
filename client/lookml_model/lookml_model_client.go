// Code generated by go-swagger; DO NOT EDIT.

package lookml_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lookml model API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lookml model API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AllLookmlModels(params *AllLookmlModelsParams, opts ...ClientOption) (*AllLookmlModelsOK, error)

	CreateLookmlModel(params *CreateLookmlModelParams, opts ...ClientOption) (*CreateLookmlModelOK, error)

	DeleteLookmlModel(params *DeleteLookmlModelParams, opts ...ClientOption) (*DeleteLookmlModelNoContent, error)

	GraphDerivedTablesForModel(params *GraphDerivedTablesForModelParams, opts ...ClientOption) (*GraphDerivedTablesForModelOK, error)

	LookmlModel(params *LookmlModelParams, opts ...ClientOption) (*LookmlModelOK, error)

	LookmlModelExplore(params *LookmlModelExploreParams, opts ...ClientOption) (*LookmlModelExploreOK, error)

	UpdateLookmlModel(params *UpdateLookmlModelParams, opts ...ClientOption) (*UpdateLookmlModelOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AllLookmlModels gets all look m l models

  ### Get information about all lookml models.

*/
func (a *Client) AllLookmlModels(params *AllLookmlModelsParams, opts ...ClientOption) (*AllLookmlModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllLookmlModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "all_lookml_models",
		Method:             "GET",
		PathPattern:        "/lookml_models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllLookmlModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllLookmlModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_lookml_models: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLookmlModel creates look m l model

  ### Create a lookml model using the specified configuration.

*/
func (a *Client) CreateLookmlModel(params *CreateLookmlModelParams, opts ...ClientOption) (*CreateLookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLookmlModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_lookml_model",
		Method:             "POST",
		PathPattern:        "/lookml_models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLookmlModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_lookml_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLookmlModel deletes look m l model

  ### Delete a lookml model.

*/
func (a *Client) DeleteLookmlModel(params *DeleteLookmlModelParams, opts ...ClientOption) (*DeleteLookmlModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLookmlModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_lookml_model",
		Method:             "DELETE",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLookmlModelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_lookml_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GraphDerivedTablesForModel gets derived table

  ### Discover information about derived tables

*/
func (a *Client) GraphDerivedTablesForModel(params *GraphDerivedTablesForModelParams, opts ...ClientOption) (*GraphDerivedTablesForModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGraphDerivedTablesForModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "graph_derived_tables_for_model",
		Method:             "GET",
		PathPattern:        "/derived_table/graph/model/{model}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GraphDerivedTablesForModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GraphDerivedTablesForModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for graph_derived_tables_for_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LookmlModel gets look m l model

  ### Get information about a lookml model.

*/
func (a *Client) LookmlModel(params *LookmlModelParams, opts ...ClientOption) (*LookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookmlModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lookml_model",
		Method:             "GET",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LookmlModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lookml_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LookmlModelExplore gets look m l model explore

  ### Get information about a lookml model explore.

*/
func (a *Client) LookmlModelExplore(params *LookmlModelExploreParams, opts ...ClientOption) (*LookmlModelExploreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookmlModelExploreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lookml_model_explore",
		Method:             "GET",
		PathPattern:        "/lookml_models/{lookml_model_name}/explores/{explore_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LookmlModelExploreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LookmlModelExploreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lookml_model_explore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLookmlModel updates look m l model

  ### Update a lookml model using the specified configuration.

*/
func (a *Client) UpdateLookmlModel(params *UpdateLookmlModelParams, opts ...ClientOption) (*UpdateLookmlModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLookmlModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_lookml_model",
		Method:             "PATCH",
		PathPattern:        "/lookml_models/{lookml_model_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLookmlModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLookmlModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_lookml_model: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
