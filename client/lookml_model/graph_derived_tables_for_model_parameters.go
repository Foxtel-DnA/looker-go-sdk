// Code generated by go-swagger; DO NOT EDIT.

package lookml_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGraphDerivedTablesForModelParams creates a new GraphDerivedTablesForModelParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGraphDerivedTablesForModelParams() *GraphDerivedTablesForModelParams {
	return &GraphDerivedTablesForModelParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGraphDerivedTablesForModelParamsWithTimeout creates a new GraphDerivedTablesForModelParams object
// with the ability to set a timeout on a request.
func NewGraphDerivedTablesForModelParamsWithTimeout(timeout time.Duration) *GraphDerivedTablesForModelParams {
	return &GraphDerivedTablesForModelParams{
		timeout: timeout,
	}
}

// NewGraphDerivedTablesForModelParamsWithContext creates a new GraphDerivedTablesForModelParams object
// with the ability to set a context for a request.
func NewGraphDerivedTablesForModelParamsWithContext(ctx context.Context) *GraphDerivedTablesForModelParams {
	return &GraphDerivedTablesForModelParams{
		Context: ctx,
	}
}

// NewGraphDerivedTablesForModelParamsWithHTTPClient creates a new GraphDerivedTablesForModelParams object
// with the ability to set a custom HTTPClient for a request.
func NewGraphDerivedTablesForModelParamsWithHTTPClient(client *http.Client) *GraphDerivedTablesForModelParams {
	return &GraphDerivedTablesForModelParams{
		HTTPClient: client,
	}
}

/* GraphDerivedTablesForModelParams contains all the parameters to send to the API endpoint
   for the graph derived tables for model operation.

   Typically these are written to a http.Request.
*/
type GraphDerivedTablesForModelParams struct {

	/* Color.

	   Color denoting the build status of the graph. Grey = not built, green = built, yellow = building, red = error.
	*/
	Color *string

	/* Format.

	   The format of the graph. Valid values are [dot]. Default is `dot`
	*/
	Format *string

	/* Model.

	   The name of the Lookml model.
	*/
	Model string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the graph derived tables for model params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GraphDerivedTablesForModelParams) WithDefaults() *GraphDerivedTablesForModelParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the graph derived tables for model params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GraphDerivedTablesForModelParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithTimeout(timeout time.Duration) *GraphDerivedTablesForModelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithContext(ctx context.Context) *GraphDerivedTablesForModelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithHTTPClient(client *http.Client) *GraphDerivedTablesForModelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColor adds the color to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithColor(color *string) *GraphDerivedTablesForModelParams {
	o.SetColor(color)
	return o
}

// SetColor adds the color to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetColor(color *string) {
	o.Color = color
}

// WithFormat adds the format to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithFormat(format *string) *GraphDerivedTablesForModelParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetFormat(format *string) {
	o.Format = format
}

// WithModel adds the model to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) WithModel(model string) *GraphDerivedTablesForModelParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the graph derived tables for model params
func (o *GraphDerivedTablesForModelParams) SetModel(model string) {
	o.Model = model
}

// WriteToRequest writes these params to a swagger request
func (o *GraphDerivedTablesForModelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Color != nil {

		// query param color
		var qrColor string

		if o.Color != nil {
			qrColor = *o.Color
		}
		qColor := qrColor
		if qColor != "" {

			if err := r.SetQueryParam("color", qColor); err != nil {
				return err
			}
		}
	}

	if o.Format != nil {

		// query param format
		var qrFormat string

		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {

			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}
	}

	// path param model
	if err := r.SetPathParam("model", o.Model); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
