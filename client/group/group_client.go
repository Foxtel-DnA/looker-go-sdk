// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddGroupGroup(params *AddGroupGroupParams, opts ...ClientOption) (*AddGroupGroupOK, error)

	AddGroupUser(params *AddGroupUserParams, opts ...ClientOption) (*AddGroupUserOK, error)

	AllGroupGroups(params *AllGroupGroupsParams, opts ...ClientOption) (*AllGroupGroupsOK, error)

	AllGroupUsers(params *AllGroupUsersParams, opts ...ClientOption) (*AllGroupUsersOK, error)

	AllGroups(params *AllGroupsParams, opts ...ClientOption) (*AllGroupsOK, error)

	CreateGroup(params *CreateGroupParams, opts ...ClientOption) (*CreateGroupOK, error)

	DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupNoContent, error)

	DeleteGroupFromGroup(params *DeleteGroupFromGroupParams, opts ...ClientOption) (*DeleteGroupFromGroupNoContent, error)

	DeleteGroupUser(params *DeleteGroupUserParams, opts ...ClientOption) (*DeleteGroupUserNoContent, error)

	DeleteUserAttributeGroupValue(params *DeleteUserAttributeGroupValueParams, opts ...ClientOption) (*DeleteUserAttributeGroupValueNoContent, error)

	Group(params *GroupParams, opts ...ClientOption) (*GroupOK, error)

	SearchGroups(params *SearchGroupsParams, opts ...ClientOption) (*SearchGroupsOK, error)

	UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error)

	UpdateUserAttributeGroupValue(params *UpdateUserAttributeGroupValueParams, opts ...ClientOption) (*UpdateUserAttributeGroupValueOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddGroupGroup adds a group to group

  ### Adds a new group to a group.

*/
func (a *Client) AddGroupGroup(params *AddGroupGroupParams, opts ...ClientOption) (*AddGroupGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "add_group_group",
		Method:             "POST",
		PathPattern:        "/groups/{group_id}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGroupGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add_group_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddGroupUser adds a user to group

  ### Adds a new user to a group.

*/
func (a *Client) AddGroupUser(params *AddGroupUserParams, opts ...ClientOption) (*AddGroupUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "add_group_user",
		Method:             "POST",
		PathPattern:        "/groups/{group_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGroupUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGroupUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add_group_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AllGroupGroups gets all groups in group

  ### Get information about all the groups in a group

*/
func (a *Client) AllGroupGroups(params *AllGroupGroupsParams, opts ...ClientOption) (*AllGroupGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "all_group_groups",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllGroupGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_group_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AllGroupUsers gets all users in group

  ### Get information about all the users directly included in a group.

*/
func (a *Client) AllGroupUsers(params *AllGroupUsersParams, opts ...ClientOption) (*AllGroupUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "all_group_users",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllGroupUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_group_users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AllGroups gets all groups

  ### Get information about all groups.

*/
func (a *Client) AllGroups(params *AllGroupsParams, opts ...ClientOption) (*AllGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "all_groups",
		Method:             "GET",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGroup creates group

  ### Creates a new group (admin only).

*/
func (a *Client) CreateGroup(params *CreateGroupParams, opts ...ClientOption) (*CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_group",
		Method:             "POST",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroup deletes group

  ### Deletes a group (admin only).

*/
func (a *Client) DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_group",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupFromGroup deletes a group from group

  ### Removes a group from a group.

*/
func (a *Client) DeleteGroupFromGroup(params *DeleteGroupFromGroupParams, opts ...ClientOption) (*DeleteGroupFromGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_group_from_group",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/groups/{deleting_group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupFromGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_group_from_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupUser removes a user from group

  ### Removes a user from a group.

*/
func (a *Client) DeleteGroupUser(params *DeleteGroupUserParams, opts ...ClientOption) (*DeleteGroupUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_group_user",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_group_user: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUserAttributeGroupValue deletes user attribute group value

  ### Remove a user attribute value from a group.

*/
func (a *Client) DeleteUserAttributeGroupValue(params *DeleteUserAttributeGroupValueParams, opts ...ClientOption) (*DeleteUserAttributeGroupValueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAttributeGroupValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_user_attribute_group_value",
		Method:             "DELETE",
		PathPattern:        "/groups/{group_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAttributeGroupValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserAttributeGroupValueNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_user_attribute_group_value: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Group gets group

  ### Get information about a group.

*/
func (a *Client) Group(params *GroupParams, opts ...ClientOption) (*GroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "group",
		Method:             "GET",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchGroups searches groups

  ### Search groups

Returns all group records that match the given search criteria.

If multiple search params are given and `filter_or` is FALSE or not specified,
search params are combined in a logical AND operation.
Only rows that match *all* search param criteria will be returned.

If `filter_or` is TRUE, multiple search params are combined in a logical OR operation.
Results will include rows that match **any** of the search criteria.

String search params use case-insensitive matching.
String search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.
example="dan%" will match "danger" and "Danzig" but not "David"
example="D_m%" will match "Damage" and "dump"

Integer search params can accept a single value or a comma separated list of values. The multiple
values will be combined under a logical OR operation - results will match at least one of
the given values.

Most search params can accept "IS NULL" and "NOT NULL" as special expressions to match
or exclude (respectively) rows where the column is null.

Boolean search params accept only "true" and "false" as values.


*/
func (a *Client) SearchGroups(params *SearchGroupsParams, opts ...ClientOption) (*SearchGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_groups",
		Method:             "GET",
		PathPattern:        "/groups/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGroup updates group

  ### Updates the a group (admin only).
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_group",
		Method:             "PATCH",
		PathPattern:        "/groups/{group_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_group: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUserAttributeGroupValue sets user attribute group value

  ### Set the value of a user attribute for a group.

For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).

*/
func (a *Client) UpdateUserAttributeGroupValue(params *UpdateUserAttributeGroupValueParams, opts ...ClientOption) (*UpdateUserAttributeGroupValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAttributeGroupValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_user_attribute_group_value",
		Method:             "PATCH",
		PathPattern:        "/groups/{group_id}/attribute_values/{user_attribute_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAttributeGroupValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserAttributeGroupValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_user_attribute_group_value: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
