// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteGroupUserParams creates a new DeleteGroupUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteGroupUserParams() *DeleteGroupUserParams {
	return &DeleteGroupUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteGroupUserParamsWithTimeout creates a new DeleteGroupUserParams object
// with the ability to set a timeout on a request.
func NewDeleteGroupUserParamsWithTimeout(timeout time.Duration) *DeleteGroupUserParams {
	return &DeleteGroupUserParams{
		timeout: timeout,
	}
}

// NewDeleteGroupUserParamsWithContext creates a new DeleteGroupUserParams object
// with the ability to set a context for a request.
func NewDeleteGroupUserParamsWithContext(ctx context.Context) *DeleteGroupUserParams {
	return &DeleteGroupUserParams{
		Context: ctx,
	}
}

// NewDeleteGroupUserParamsWithHTTPClient creates a new DeleteGroupUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteGroupUserParamsWithHTTPClient(client *http.Client) *DeleteGroupUserParams {
	return &DeleteGroupUserParams{
		HTTPClient: client,
	}
}

/* DeleteGroupUserParams contains all the parameters to send to the API endpoint
   for the delete group user operation.

   Typically these are written to a http.Request.
*/
type DeleteGroupUserParams struct {

	/* GroupID.

	   Id of group

	   Format: int64
	*/
	GroupID int64

	/* UserID.

	   Id of user to remove from group

	   Format: int64
	*/
	UserID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete group user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGroupUserParams) WithDefaults() *DeleteGroupUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete group user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGroupUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete group user params
func (o *DeleteGroupUserParams) WithTimeout(timeout time.Duration) *DeleteGroupUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete group user params
func (o *DeleteGroupUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete group user params
func (o *DeleteGroupUserParams) WithContext(ctx context.Context) *DeleteGroupUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete group user params
func (o *DeleteGroupUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete group user params
func (o *DeleteGroupUserParams) WithHTTPClient(client *http.Client) *DeleteGroupUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete group user params
func (o *DeleteGroupUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the delete group user params
func (o *DeleteGroupUserParams) WithGroupID(groupID int64) *DeleteGroupUserParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the delete group user params
func (o *DeleteGroupUserParams) SetGroupID(groupID int64) {
	o.GroupID = groupID
}

// WithUserID adds the userID to the delete group user params
func (o *DeleteGroupUserParams) WithUserID(userID int64) *DeleteGroupUserParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the delete group user params
func (o *DeleteGroupUserParams) SetUserID(userID int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteGroupUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param group_id
	if err := r.SetPathParam("group_id", swag.FormatInt64(o.GroupID)); err != nil {
		return err
	}

	// path param user_id
	if err := r.SetPathParam("user_id", swag.FormatInt64(o.UserID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
