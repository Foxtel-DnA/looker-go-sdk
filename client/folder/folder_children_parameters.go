// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFolderChildrenParams creates a new FolderChildrenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFolderChildrenParams() *FolderChildrenParams {
	return &FolderChildrenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFolderChildrenParamsWithTimeout creates a new FolderChildrenParams object
// with the ability to set a timeout on a request.
func NewFolderChildrenParamsWithTimeout(timeout time.Duration) *FolderChildrenParams {
	return &FolderChildrenParams{
		timeout: timeout,
	}
}

// NewFolderChildrenParamsWithContext creates a new FolderChildrenParams object
// with the ability to set a context for a request.
func NewFolderChildrenParamsWithContext(ctx context.Context) *FolderChildrenParams {
	return &FolderChildrenParams{
		Context: ctx,
	}
}

// NewFolderChildrenParamsWithHTTPClient creates a new FolderChildrenParams object
// with the ability to set a custom HTTPClient for a request.
func NewFolderChildrenParamsWithHTTPClient(client *http.Client) *FolderChildrenParams {
	return &FolderChildrenParams{
		HTTPClient: client,
	}
}

/* FolderChildrenParams contains all the parameters to send to the API endpoint
   for the folder children operation.

   Typically these are written to a http.Request.
*/
type FolderChildrenParams struct {

	/* Fields.

	   Requested fields.
	*/
	Fields *string

	/* FolderID.

	   Id of folder
	*/
	FolderID string

	/* Page.

	   Requested page.

	   Format: int64
	*/
	Page *int64

	/* PerPage.

	   Results per page.

	   Format: int64
	*/
	PerPage *int64

	/* Sorts.

	   Fields to sort by.
	*/
	Sorts *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the folder children params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FolderChildrenParams) WithDefaults() *FolderChildrenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the folder children params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FolderChildrenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the folder children params
func (o *FolderChildrenParams) WithTimeout(timeout time.Duration) *FolderChildrenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the folder children params
func (o *FolderChildrenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the folder children params
func (o *FolderChildrenParams) WithContext(ctx context.Context) *FolderChildrenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the folder children params
func (o *FolderChildrenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the folder children params
func (o *FolderChildrenParams) WithHTTPClient(client *http.Client) *FolderChildrenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the folder children params
func (o *FolderChildrenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the folder children params
func (o *FolderChildrenParams) WithFields(fields *string) *FolderChildrenParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the folder children params
func (o *FolderChildrenParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFolderID adds the folderID to the folder children params
func (o *FolderChildrenParams) WithFolderID(folderID string) *FolderChildrenParams {
	o.SetFolderID(folderID)
	return o
}

// SetFolderID adds the folderId to the folder children params
func (o *FolderChildrenParams) SetFolderID(folderID string) {
	o.FolderID = folderID
}

// WithPage adds the page to the folder children params
func (o *FolderChildrenParams) WithPage(page *int64) *FolderChildrenParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the folder children params
func (o *FolderChildrenParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the folder children params
func (o *FolderChildrenParams) WithPerPage(perPage *int64) *FolderChildrenParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the folder children params
func (o *FolderChildrenParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSorts adds the sorts to the folder children params
func (o *FolderChildrenParams) WithSorts(sorts *string) *FolderChildrenParams {
	o.SetSorts(sorts)
	return o
}

// SetSorts adds the sorts to the folder children params
func (o *FolderChildrenParams) SetSorts(sorts *string) {
	o.Sorts = sorts
}

// WriteToRequest writes these params to a swagger request
func (o *FolderChildrenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	// path param folder_id
	if err := r.SetPathParam("folder_id", o.FolderID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Sorts != nil {

		// query param sorts
		var qrSorts string

		if o.Sorts != nil {
			qrSorts = *o.Sorts
		}
		qSorts := qrSorts
		if qSorts != "" {

			if err := r.SetQueryParam("sorts", qSorts); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
