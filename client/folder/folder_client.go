// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new folder API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for folder API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AllFolders(params *AllFoldersParams, opts ...ClientOption) (*AllFoldersOK, error)

	CreateFolder(params *CreateFolderParams, opts ...ClientOption) (*CreateFolderOK, error)

	DeleteFolder(params *DeleteFolderParams, opts ...ClientOption) (*DeleteFolderNoContent, error)

	Folder(params *FolderParams, opts ...ClientOption) (*FolderOK, error)

	FolderAncestors(params *FolderAncestorsParams, opts ...ClientOption) (*FolderAncestorsOK, error)

	FolderChildren(params *FolderChildrenParams, opts ...ClientOption) (*FolderChildrenOK, error)

	FolderChildrenSearch(params *FolderChildrenSearchParams, opts ...ClientOption) (*FolderChildrenSearchOK, error)

	FolderDashboards(params *FolderDashboardsParams, opts ...ClientOption) (*FolderDashboardsOK, error)

	FolderLooks(params *FolderLooksParams, opts ...ClientOption) (*FolderLooksOK, error)

	FolderParent(params *FolderParentParams, opts ...ClientOption) (*FolderParentOK, error)

	SearchFolders(params *SearchFoldersParams, opts ...ClientOption) (*SearchFoldersOK, error)

	UpdateFolder(params *UpdateFolderParams, opts ...ClientOption) (*UpdateFolderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AllFolders gets all folders

  ### Get information about all folders.

In API 3.x, this will not return empty personal folders, unless they belong to the calling user.
In API 4.0+, all personal folders will be returned.


*/
func (a *Client) AllFolders(params *AllFoldersParams, opts ...ClientOption) (*AllFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "all_folders",
		Method:             "GET",
		PathPattern:        "/folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AllFoldersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for all_folders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFolder creates folder

  ### Create a folder with specified information.

Caller must have permission to edit the parent folder and to create folders, otherwise the request
returns 404 Not Found.

*/
func (a *Client) CreateFolder(params *CreateFolderParams, opts ...ClientOption) (*CreateFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_folder",
		Method:             "POST",
		PathPattern:        "/folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_folder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFolder deletes folder

  ### Delete the folder with a specific id including any children folders.
**DANGER** this will delete all looks and dashboards in the folder.

*/
func (a *Client) DeleteFolder(params *DeleteFolderParams, opts ...ClientOption) (*DeleteFolderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_folder",
		Method:             "DELETE",
		PathPattern:        "/folders/{folder_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFolderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_folder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Folder gets folder

  ### Get information about the folder with a specific id.
*/
func (a *Client) Folder(params *FolderParams, opts ...ClientOption) (*FolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderAncestors gets folder ancestors

  ### Get the ancestors of a folder
*/
func (a *Client) FolderAncestors(params *FolderAncestorsParams, opts ...ClientOption) (*FolderAncestorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderAncestorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_ancestors",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/ancestors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderAncestorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderAncestorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_ancestors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderChildren gets folder children

  ### Get the children of a folder.
*/
func (a *Client) FolderChildren(params *FolderChildrenParams, opts ...ClientOption) (*FolderChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderChildrenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_children",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/children",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderChildrenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_children: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderChildrenSearch searches folder children

  ### Search the children of a folder
*/
func (a *Client) FolderChildrenSearch(params *FolderChildrenSearchParams, opts ...ClientOption) (*FolderChildrenSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderChildrenSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_children_search",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/children/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderChildrenSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderChildrenSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_children_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderDashboards gets folder dashboards

  ### Get the dashboards in a folder
*/
func (a *Client) FolderDashboards(params *FolderDashboardsParams, opts ...ClientOption) (*FolderDashboardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderDashboardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_dashboards",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderDashboardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderDashboardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_dashboards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderLooks gets folder looks

  ### Get all looks in a folder.
In API 3.x, this will return all looks in a folder, including looks in the trash.
In API 4.0+, all looks in a folder will be returned, excluding looks in the trash.

*/
func (a *Client) FolderLooks(params *FolderLooksParams, opts ...ClientOption) (*FolderLooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderLooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_looks",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/looks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderLooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderLooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_looks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FolderParent gets folder parent

  ### Get the parent of a folder
*/
func (a *Client) FolderParent(params *FolderParentParams, opts ...ClientOption) (*FolderParentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFolderParentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "folder_parent",
		Method:             "GET",
		PathPattern:        "/folders/{folder_id}/parent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FolderParentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FolderParentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for folder_parent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchFolders searches folders

  Search for folders by creator id, parent id, name, etc
*/
func (a *Client) SearchFolders(params *SearchFoldersParams, opts ...ClientOption) (*SearchFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_folders",
		Method:             "GET",
		PathPattern:        "/folders/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchFoldersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_folders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFolder updates folder

  ### Update the folder with a specific id.
*/
func (a *Client) UpdateFolder(params *UpdateFolderParams, opts ...ClientOption) (*UpdateFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_folder",
		Method:             "PATCH",
		PathPattern:        "/folders/{folder_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_folder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
