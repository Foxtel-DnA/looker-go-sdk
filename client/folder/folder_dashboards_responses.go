// Code generated by go-swagger; DO NOT EDIT.

package folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"your-damain.com/swagger/looker-api-golang/models"
)

// FolderDashboardsReader is a Reader for the FolderDashboards structure.
type FolderDashboardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FolderDashboardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFolderDashboardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFolderDashboardsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFolderDashboardsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFolderDashboardsOK creates a FolderDashboardsOK with default headers values
func NewFolderDashboardsOK() *FolderDashboardsOK {
	return &FolderDashboardsOK{}
}

/* FolderDashboardsOK describes a response with status code 200, with default header values.

Dashboard
*/
type FolderDashboardsOK struct {
	Payload []*models.Dashboard
}

func (o *FolderDashboardsOK) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/dashboards][%d] folderDashboardsOK  %+v", 200, o.Payload)
}
func (o *FolderDashboardsOK) GetPayload() []*models.Dashboard {
	return o.Payload
}

func (o *FolderDashboardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderDashboardsBadRequest creates a FolderDashboardsBadRequest with default headers values
func NewFolderDashboardsBadRequest() *FolderDashboardsBadRequest {
	return &FolderDashboardsBadRequest{}
}

/* FolderDashboardsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FolderDashboardsBadRequest struct {
	Payload *models.Error
}

func (o *FolderDashboardsBadRequest) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/dashboards][%d] folderDashboardsBadRequest  %+v", 400, o.Payload)
}
func (o *FolderDashboardsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderDashboardsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFolderDashboardsNotFound creates a FolderDashboardsNotFound with default headers values
func NewFolderDashboardsNotFound() *FolderDashboardsNotFound {
	return &FolderDashboardsNotFound{}
}

/* FolderDashboardsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FolderDashboardsNotFound struct {
	Payload *models.Error
}

func (o *FolderDashboardsNotFound) Error() string {
	return fmt.Sprintf("[GET /folders/{folder_id}/dashboards][%d] folderDashboardsNotFound  %+v", 404, o.Payload)
}
func (o *FolderDashboardsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *FolderDashboardsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
