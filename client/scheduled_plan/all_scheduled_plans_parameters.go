// Code generated by go-swagger; DO NOT EDIT.

package scheduled_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAllScheduledPlansParams creates a new AllScheduledPlansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAllScheduledPlansParams() *AllScheduledPlansParams {
	return &AllScheduledPlansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAllScheduledPlansParamsWithTimeout creates a new AllScheduledPlansParams object
// with the ability to set a timeout on a request.
func NewAllScheduledPlansParamsWithTimeout(timeout time.Duration) *AllScheduledPlansParams {
	return &AllScheduledPlansParams{
		timeout: timeout,
	}
}

// NewAllScheduledPlansParamsWithContext creates a new AllScheduledPlansParams object
// with the ability to set a context for a request.
func NewAllScheduledPlansParamsWithContext(ctx context.Context) *AllScheduledPlansParams {
	return &AllScheduledPlansParams{
		Context: ctx,
	}
}

// NewAllScheduledPlansParamsWithHTTPClient creates a new AllScheduledPlansParams object
// with the ability to set a custom HTTPClient for a request.
func NewAllScheduledPlansParamsWithHTTPClient(client *http.Client) *AllScheduledPlansParams {
	return &AllScheduledPlansParams{
		HTTPClient: client,
	}
}

/* AllScheduledPlansParams contains all the parameters to send to the API endpoint
   for the all scheduled plans operation.

   Typically these are written to a http.Request.
*/
type AllScheduledPlansParams struct {

	/* AllUsers.

	   Return scheduled plans belonging to all users (caller needs see_schedules permission)
	*/
	AllUsers *bool

	/* Fields.

	   Comma delimited list of field names. If provided, only the fields specified will be included in the response
	*/
	Fields *string

	/* UserID.

	   Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.

	   Format: int64
	*/
	UserID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the all scheduled plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AllScheduledPlansParams) WithDefaults() *AllScheduledPlansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the all scheduled plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AllScheduledPlansParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the all scheduled plans params
func (o *AllScheduledPlansParams) WithTimeout(timeout time.Duration) *AllScheduledPlansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the all scheduled plans params
func (o *AllScheduledPlansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the all scheduled plans params
func (o *AllScheduledPlansParams) WithContext(ctx context.Context) *AllScheduledPlansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the all scheduled plans params
func (o *AllScheduledPlansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the all scheduled plans params
func (o *AllScheduledPlansParams) WithHTTPClient(client *http.Client) *AllScheduledPlansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the all scheduled plans params
func (o *AllScheduledPlansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllUsers adds the allUsers to the all scheduled plans params
func (o *AllScheduledPlansParams) WithAllUsers(allUsers *bool) *AllScheduledPlansParams {
	o.SetAllUsers(allUsers)
	return o
}

// SetAllUsers adds the allUsers to the all scheduled plans params
func (o *AllScheduledPlansParams) SetAllUsers(allUsers *bool) {
	o.AllUsers = allUsers
}

// WithFields adds the fields to the all scheduled plans params
func (o *AllScheduledPlansParams) WithFields(fields *string) *AllScheduledPlansParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the all scheduled plans params
func (o *AllScheduledPlansParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithUserID adds the userID to the all scheduled plans params
func (o *AllScheduledPlansParams) WithUserID(userID *int64) *AllScheduledPlansParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the all scheduled plans params
func (o *AllScheduledPlansParams) SetUserID(userID *int64) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *AllScheduledPlansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllUsers != nil {

		// query param all_users
		var qrAllUsers bool

		if o.AllUsers != nil {
			qrAllUsers = *o.AllUsers
		}
		qAllUsers := swag.FormatBool(qrAllUsers)
		if qAllUsers != "" {

			if err := r.SetQueryParam("all_users", qAllUsers); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID int64

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := swag.FormatInt64(qrUserID)
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
