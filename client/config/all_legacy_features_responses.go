// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"your-damain.com/swagger/looker-api-golang/models"
)

// AllLegacyFeaturesReader is a Reader for the AllLegacyFeatures structure.
type AllLegacyFeaturesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllLegacyFeaturesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllLegacyFeaturesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllLegacyFeaturesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAllLegacyFeaturesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAllLegacyFeaturesOK creates a AllLegacyFeaturesOK with default headers values
func NewAllLegacyFeaturesOK() *AllLegacyFeaturesOK {
	return &AllLegacyFeaturesOK{}
}

/* AllLegacyFeaturesOK describes a response with status code 200, with default header values.

Legacy Feature
*/
type AllLegacyFeaturesOK struct {
	Payload []*models.LegacyFeature
}

func (o *AllLegacyFeaturesOK) Error() string {
	return fmt.Sprintf("[GET /legacy_features][%d] allLegacyFeaturesOK  %+v", 200, o.Payload)
}
func (o *AllLegacyFeaturesOK) GetPayload() []*models.LegacyFeature {
	return o.Payload
}

func (o *AllLegacyFeaturesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllLegacyFeaturesBadRequest creates a AllLegacyFeaturesBadRequest with default headers values
func NewAllLegacyFeaturesBadRequest() *AllLegacyFeaturesBadRequest {
	return &AllLegacyFeaturesBadRequest{}
}

/* AllLegacyFeaturesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AllLegacyFeaturesBadRequest struct {
	Payload *models.Error
}

func (o *AllLegacyFeaturesBadRequest) Error() string {
	return fmt.Sprintf("[GET /legacy_features][%d] allLegacyFeaturesBadRequest  %+v", 400, o.Payload)
}
func (o *AllLegacyFeaturesBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllLegacyFeaturesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllLegacyFeaturesNotFound creates a AllLegacyFeaturesNotFound with default headers values
func NewAllLegacyFeaturesNotFound() *AllLegacyFeaturesNotFound {
	return &AllLegacyFeaturesNotFound{}
}

/* AllLegacyFeaturesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AllLegacyFeaturesNotFound struct {
	Payload *models.Error
}

func (o *AllLegacyFeaturesNotFound) Error() string {
	return fmt.Sprintf("[GET /legacy_features][%d] allLegacyFeaturesNotFound  %+v", 404, o.Payload)
}
func (o *AllLegacyFeaturesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllLegacyFeaturesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
