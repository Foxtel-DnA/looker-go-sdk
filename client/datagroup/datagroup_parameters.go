// Code generated by go-swagger; DO NOT EDIT.

package datagroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDatagroupParams creates a new DatagroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDatagroupParams() *DatagroupParams {
	return &DatagroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDatagroupParamsWithTimeout creates a new DatagroupParams object
// with the ability to set a timeout on a request.
func NewDatagroupParamsWithTimeout(timeout time.Duration) *DatagroupParams {
	return &DatagroupParams{
		timeout: timeout,
	}
}

// NewDatagroupParamsWithContext creates a new DatagroupParams object
// with the ability to set a context for a request.
func NewDatagroupParamsWithContext(ctx context.Context) *DatagroupParams {
	return &DatagroupParams{
		Context: ctx,
	}
}

// NewDatagroupParamsWithHTTPClient creates a new DatagroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewDatagroupParamsWithHTTPClient(client *http.Client) *DatagroupParams {
	return &DatagroupParams{
		HTTPClient: client,
	}
}

/* DatagroupParams contains all the parameters to send to the API endpoint
   for the datagroup operation.

   Typically these are written to a http.Request.
*/
type DatagroupParams struct {

	/* DatagroupID.

	   ID of datagroup.
	*/
	DatagroupID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the datagroup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DatagroupParams) WithDefaults() *DatagroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the datagroup params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DatagroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the datagroup params
func (o *DatagroupParams) WithTimeout(timeout time.Duration) *DatagroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the datagroup params
func (o *DatagroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the datagroup params
func (o *DatagroupParams) WithContext(ctx context.Context) *DatagroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the datagroup params
func (o *DatagroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the datagroup params
func (o *DatagroupParams) WithHTTPClient(client *http.Client) *DatagroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the datagroup params
func (o *DatagroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatagroupID adds the datagroupID to the datagroup params
func (o *DatagroupParams) WithDatagroupID(datagroupID string) *DatagroupParams {
	o.SetDatagroupID(datagroupID)
	return o
}

// SetDatagroupID adds the datagroupId to the datagroup params
func (o *DatagroupParams) SetDatagroupID(datagroupID string) {
	o.DatagroupID = datagroupID
}

// WriteToRequest writes these params to a swagger request
func (o *DatagroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param datagroup_id
	if err := r.SetPathParam("datagroup_id", o.DatagroupID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
