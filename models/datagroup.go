// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Datagroup datagroup
//
// swagger:model Datagroup
type Datagroup struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// UNIX timestamp at which this entry was created.
	// Read Only: true
	CreatedAt int64 `json:"created_at,omitempty"`

	// Unique ID of the datagroup
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Name of the model containing the datagroup. Unique when combined with name.
	// Read Only: true
	ModelName string `json:"model_name,omitempty"`

	// Name of the datagroup. Unique when combined with model_name.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// UNIX timestamp before which cache entries are considered stale. Cannot be in the future.
	StaleBefore int64 `json:"stale_before,omitempty"`

	// UNIX timestamp at which this entry trigger was last checked.
	// Read Only: true
	TriggerCheckAt int64 `json:"trigger_check_at,omitempty"`

	// The message returned with the error of the last trigger check.
	// Read Only: true
	TriggerError string `json:"trigger_error,omitempty"`

	// The value of the trigger when last checked.
	// Read Only: true
	TriggerValue string `json:"trigger_value,omitempty"`

	// UNIX timestamp at which this entry became triggered. Cannot be in the future.
	TriggeredAt int64 `json:"triggered_at,omitempty"`
}

// Validate validates this datagroup
func (m *Datagroup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this datagroup based on the context it is used
func (m *Datagroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerCheckAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datagroup) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Datagroup) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", int64(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateModelName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "model_name", "body", string(m.ModelName)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateTriggerCheckAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "trigger_check_at", "body", int64(m.TriggerCheckAt)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateTriggerError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "trigger_error", "body", string(m.TriggerError)); err != nil {
		return err
	}

	return nil
}

func (m *Datagroup) contextValidateTriggerValue(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "trigger_value", "body", string(m.TriggerValue)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Datagroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Datagroup) UnmarshalBinary(b []byte) error {
	var res Datagroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
