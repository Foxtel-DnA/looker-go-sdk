// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LDAPUser l d a p user
//
// swagger:model LDAPUser
type LDAPUser struct {

	// Array of user's email addresses and aliases for use in migration
	// Read Only: true
	AllEmails []string `json:"all_emails"`

	// Dictionary of user's attributes (name/value)
	// Read Only: true
	Attributes map[string]string `json:"attributes,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Primary email address
	// Read Only: true
	Email string `json:"email,omitempty"`

	// First name
	// Read Only: true
	FirstName string `json:"first_name,omitempty"`

	// Array of user's groups (group names only)
	// Read Only: true
	Groups []string `json:"groups"`

	// Last Name
	// Read Only: true
	LastName string `json:"last_name,omitempty"`

	// LDAP's distinguished name for the user record
	// Read Only: true
	LdapDn string `json:"ldap_dn,omitempty"`

	// LDAP's Unique ID for the user
	// Read Only: true
	LdapID string `json:"ldap_id,omitempty"`

	// Array of user's roles (role names only)
	// Read Only: true
	Roles []string `json:"roles"`

	// Link to ldap config
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this l d a p user
func (m *LDAPUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LDAPUser) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this l d a p user based on the context it is used
func (m *LDAPUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapDn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LDAPUser) contextValidateAllEmails(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "all_emails", "body", []string(m.AllEmails)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LDAPUser) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LDAPUser) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "email", "body", string(m.Email)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateFirstName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "first_name", "body", string(m.FirstName)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "groups", "body", []string(m.Groups)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateLastName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_name", "body", string(m.LastName)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateLdapDn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ldap_dn", "body", string(m.LdapDn)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateLdapID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ldap_id", "body", string(m.LdapID)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "roles", "body", []string(m.Roles)); err != nil {
		return err
	}

	return nil
}

func (m *LDAPUser) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LDAPUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LDAPUser) UnmarshalBinary(b []byte) error {
	var res LDAPUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
