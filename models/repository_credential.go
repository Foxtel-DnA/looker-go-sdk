// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryCredential repository credential
//
// swagger:model RepositoryCredential
type RepositoryCredential struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// (Write-Only) Git password for HTTPS authentication.
	GitPassword string `json:"git_password,omitempty"`

	// Git username for HTTPS authentication.
	GitUsername string `json:"git_username,omitempty"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Whether the credentials have been configured for the Git Repository.
	// Read Only: true
	IsConfigured *bool `json:"is_configured,omitempty"`

	// Git remote repository url
	// Read Only: true
	RemoteURL string `json:"remote_url,omitempty"`

	// Root project Id
	// Read Only: true
	RootProjectID string `json:"root_project_id,omitempty"`

	// Public deploy key for SSH authentication.
	SSHPublicKey string `json:"ssh_public_key,omitempty"`
}

// Validate validates this repository credential
func (m *RepositoryCredential) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this repository credential based on the context it is used
func (m *RepositoryCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsConfigured(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootProjectID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryCredential) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RepositoryCredential) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryCredential) contextValidateIsConfigured(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_configured", "body", m.IsConfigured); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryCredential) contextValidateRemoteURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "remote_url", "body", string(m.RemoteURL)); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryCredential) contextValidateRootProjectID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "root_project_id", "body", string(m.RootProjectID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryCredential) UnmarshalBinary(b []byte) error {
	var res RepositoryCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
