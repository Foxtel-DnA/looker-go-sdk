// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultMakerFilterables result maker filterables
//
// swagger:model ResultMakerFilterables
type ResultMakerFilterables struct {

	// array of dashboard_filter_name: and field: objects.
	// Read Only: true
	Listen []*ResultMakerFilterablesListen `json:"listen"`

	// The model this filterable comes from (used for field suggestions).
	// Read Only: true
	Model string `json:"model,omitempty"`

	// The name of the filterable thing (Query or Merged Results).
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The view this filterable comes from (used for field suggestions).
	// Read Only: true
	View string `json:"view,omitempty"`
}

// Validate validates this result maker filterables
func (m *ResultMakerFilterables) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultMakerFilterables) validateListen(formats strfmt.Registry) error {
	if swag.IsZero(m.Listen) { // not required
		return nil
	}

	for i := 0; i < len(m.Listen); i++ {
		if swag.IsZero(m.Listen[i]) { // not required
			continue
		}

		if m.Listen[i] != nil {
			if err := m.Listen[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listen" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this result maker filterables based on the context it is used
func (m *ResultMakerFilterables) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultMakerFilterables) contextValidateListen(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "listen", "body", []*ResultMakerFilterablesListen(m.Listen)); err != nil {
		return err
	}

	for i := 0; i < len(m.Listen); i++ {

		if m.Listen[i] != nil {
			if err := m.Listen[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listen" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResultMakerFilterables) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "model", "body", string(m.Model)); err != nil {
		return err
	}

	return nil
}

func (m *ResultMakerFilterables) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *ResultMakerFilterables) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "view", "body", string(m.View)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultMakerFilterables) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultMakerFilterables) UnmarshalBinary(b []byte) error {
	var res ResultMakerFilterables
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
