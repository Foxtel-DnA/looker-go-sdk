// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LookmlTest lookml test
//
// swagger:model LookmlTest
type LookmlTest struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Name of the explore this test runs a query against
	// Read Only: true
	ExploreName string `json:"explore_name,omitempty"`

	// Name of the LookML file containing this test.
	// Read Only: true
	File string `json:"file,omitempty"`

	// Line number of this test in LookML.
	// Read Only: true
	Line int64 `json:"line,omitempty"`

	// Name of model containing this test.
	// Read Only: true
	ModelName string `json:"model_name,omitempty"`

	// Name of this test.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The url parameters that can be used to reproduce this test's query on an explore.
	// Read Only: true
	QueryURLParams string `json:"query_url_params,omitempty"`
}

// Validate validates this lookml test
func (m *LookmlTest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this lookml test based on the context it is used
func (m *LookmlTest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExploreName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryURLParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LookmlTest) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LookmlTest) contextValidateExploreName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "explore_name", "body", string(m.ExploreName)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlTest) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "file", "body", string(m.File)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlTest) contextValidateLine(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "line", "body", int64(m.Line)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlTest) contextValidateModelName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "model_name", "body", string(m.ModelName)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlTest) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlTest) contextValidateQueryURLParams(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "query_url_params", "body", string(m.QueryURLParams)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LookmlTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LookmlTest) UnmarshalBinary(b []byte) error {
	var res LookmlTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
