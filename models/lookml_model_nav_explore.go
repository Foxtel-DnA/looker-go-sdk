// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LookmlModelNavExplore lookml model nav explore
//
// swagger:model LookmlModelNavExplore
type LookmlModelNavExplore struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Description for the explore
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Label used to group explores in the navigation menus
	// Read Only: true
	GroupLabel string `json:"group_label,omitempty"`

	// Is this explore marked as hidden
	// Read Only: true
	Hidden *bool `json:"hidden,omitempty"`

	// Label for the explore
	// Read Only: true
	Label string `json:"label,omitempty"`

	// Name of the explore
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this lookml model nav explore
func (m *LookmlModelNavExplore) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this lookml model nav explore based on the context it is used
func (m *LookmlModelNavExplore) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHidden(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LookmlModelNavExplore) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LookmlModelNavExplore) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlModelNavExplore) contextValidateGroupLabel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "group_label", "body", string(m.GroupLabel)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlModelNavExplore) contextValidateHidden(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *LookmlModelNavExplore) contextValidateLabel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "label", "body", string(m.Label)); err != nil {
		return err
	}

	return nil
}

func (m *LookmlModelNavExplore) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LookmlModelNavExplore) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LookmlModelNavExplore) UnmarshalBinary(b []byte) error {
	var res LookmlModelNavExplore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
