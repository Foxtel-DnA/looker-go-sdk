// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Locale locale
//
// swagger:model Locale
type Locale struct {

	// Code for Locale
	// Read Only: true
	Code string `json:"code,omitempty"`

	// Name of Locale in English
	// Read Only: true
	EnglishName string `json:"english_name,omitempty"`

	// Name of Locale in its own language
	// Read Only: true
	NativeName string `json:"native_name,omitempty"`
}

// Validate validates this locale
func (m *Locale) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this locale based on the context it is used
func (m *Locale) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnglishName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNativeName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Locale) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "code", "body", string(m.Code)); err != nil {
		return err
	}

	return nil
}

func (m *Locale) contextValidateEnglishName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "english_name", "body", string(m.EnglishName)); err != nil {
		return err
	}

	return nil
}

func (m *Locale) contextValidateNativeName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "native_name", "body", string(m.NativeName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Locale) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Locale) UnmarshalBinary(b []byte) error {
	var res Locale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
