// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DBConnectionOverride d b connection override
//
// swagger:model DBConnectionOverride
type DBConnectionOverride struct {

	// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
	AfterConnectStatements string `json:"after_connect_statements,omitempty"`

	// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
	Certificate string `json:"certificate,omitempty"`

	// Context in which to override (`pdt` is the only allowed value)
	Context string `json:"context,omitempty"`

	// Database name
	Database string `json:"database,omitempty"`

	// (Write-Only) Certificate keyfile type - .json or .p12
	FileType string `json:"file_type,omitempty"`

	// Whether or not the password is overridden in this context
	// Read Only: true
	HasPassword *bool `json:"has_password,omitempty"`

	// Host name/address of server
	Host string `json:"host,omitempty"`

	// Additional params to add to JDBC connection string
	JdbcAdditionalParams string `json:"jdbc_additional_params,omitempty"`

	// (Write-Only) Password for server authentication
	Password string `json:"password,omitempty"`

	// Port number on server
	Port string `json:"port,omitempty"`

	// Scheme name
	Schema string `json:"schema,omitempty"`

	// Username for server authentication
	Username string `json:"username,omitempty"`
}

// Validate validates this d b connection override
func (m *DBConnectionOverride) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this d b connection override based on the context it is used
func (m *DBConnectionOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHasPassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DBConnectionOverride) contextValidateHasPassword(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "has_password", "body", m.HasPassword); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DBConnectionOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DBConnectionOverride) UnmarshalBinary(b []byte) error {
	var res DBConnectionOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
