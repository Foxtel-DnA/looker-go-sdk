// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
//
// swagger:model Group
type Group struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Group can be used in content access controls
	CanAddToContentMetadata bool `json:"can_add_to_content_metadata,omitempty"`

	// Currently logged in user is group member
	// Read Only: true
	ContainsCurrentUser *bool `json:"contains_current_user,omitempty"`

	// External Id group if embed group
	// Read Only: true
	ExternalGroupID string `json:"external_group_id,omitempty"`

	// Group membership controlled outside of Looker
	// Read Only: true
	ExternallyManaged *bool `json:"externally_managed,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// New users are added to this group by default
	// Read Only: true
	IncludeByDefault *bool `json:"include_by_default,omitempty"`

	// Name of group
	Name string `json:"name,omitempty"`

	// Number of users included in this group
	// Read Only: true
	UserCount int64 `json:"user_count,omitempty"`
}

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this group based on the context it is used
func (m *Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainsCurrentUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalGroupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternallyManaged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludeByDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Group) contextValidateContainsCurrentUser(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "contains_current_user", "body", m.ContainsCurrentUser); err != nil {
		return err
	}

	return nil
}

func (m *Group) contextValidateExternalGroupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "external_group_id", "body", string(m.ExternalGroupID)); err != nil {
		return err
	}

	return nil
}

func (m *Group) contextValidateExternallyManaged(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "externally_managed", "body", m.ExternallyManaged); err != nil {
		return err
	}

	return nil
}

func (m *Group) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Group) contextValidateIncludeByDefault(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "include_by_default", "body", m.IncludeByDefault); err != nil {
		return err
	}

	return nil
}

func (m *Group) contextValidateUserCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "user_count", "body", int64(m.UserCount)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
