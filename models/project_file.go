// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectFile project file
//
// swagger:model ProjectFile
type ProjectFile struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// State of editability for the file.
	// Read Only: true
	Editable *bool `json:"editable,omitempty"`

	// The extension of the file: .view.lkml, .model.lkml, etc
	// Read Only: true
	Extension string `json:"extension,omitempty"`

	// Status of the file according to git
	// Read Only: true
	GitStatus *GitStatus `json:"git_status,omitempty"`

	// An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases
	// Read Only: true
	ID string `json:"id,omitempty"`

	// File mime type
	// Read Only: true
	MimeType string `json:"mime_type,omitempty"`

	// Path, file name, and extension of the file relative to the project root directory
	// Read Only: true
	Path string `json:"path,omitempty"`

	// Display name
	// Read Only: true
	Title string `json:"title,omitempty"`

	// File type: model, view, etc
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this project file
func (m *ProjectFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGitStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFile) validateGitStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.GitStatus) { // not required
		return nil
	}

	if m.GitStatus != nil {
		if err := m.GitStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project file based on the context it is used
func (m *ProjectFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEditable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtension(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGitStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMimeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFile) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ProjectFile) contextValidateEditable(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "editable", "body", m.Editable); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidateExtension(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "extension", "body", string(m.Extension)); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidateGitStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.GitStatus != nil {
		if err := m.GitStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_status")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectFile) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidateMimeType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "mime_type", "body", string(m.MimeType)); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidatePath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "path", "body", string(m.Path)); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "title", "body", string(m.Title)); err != nil {
		return err
	}

	return nil
}

func (m *ProjectFile) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectFile) UnmarshalBinary(b []byte) error {
	var res ProjectFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
