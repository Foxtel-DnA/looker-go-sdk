// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SamlMetadataParseResult saml metadata parse result
//
// swagger:model SamlMetadataParseResult
type SamlMetadataParseResult struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Identify Provider Certificate
	// Read Only: true
	IdpCert string `json:"idp_cert,omitempty"`

	// Identify Provider Issuer
	// Read Only: true
	IdpIssuer string `json:"idp_issuer,omitempty"`

	// Identify Provider Url
	// Read Only: true
	IdpURL string `json:"idp_url,omitempty"`
}

// Validate validates this saml metadata parse result
func (m *SamlMetadataParseResult) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this saml metadata parse result based on the context it is used
func (m *SamlMetadataParseResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdpCert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdpIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdpURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SamlMetadataParseResult) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SamlMetadataParseResult) contextValidateIdpCert(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "idp_cert", "body", string(m.IdpCert)); err != nil {
		return err
	}

	return nil
}

func (m *SamlMetadataParseResult) contextValidateIdpIssuer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "idp_issuer", "body", string(m.IdpIssuer)); err != nil {
		return err
	}

	return nil
}

func (m *SamlMetadataParseResult) contextValidateIdpURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "idp_url", "body", string(m.IdpURL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SamlMetadataParseResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SamlMetadataParseResult) UnmarshalBinary(b []byte) error {
	var res SamlMetadataParseResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
