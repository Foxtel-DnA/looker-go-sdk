// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Folder folder
//
// swagger:model Folder
type Folder struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Children Count
	// Read Only: true
	ChildCount int64 `json:"child_count,omitempty"`

	// Id of content metadata
	// Read Only: true
	ContentMetadataID int64 `json:"content_metadata_id,omitempty"`

	// Time the space was created
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// User Id of Creator
	// Read Only: true
	CreatorID int64 `json:"creator_id,omitempty"`

	// Dashboards
	// Read Only: true
	Dashboards []*DashboardBase `json:"dashboards"`

	// Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login
	// Read Only: true
	ExternalID string `json:"external_id,omitempty"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Folder is an embed folder
	// Read Only: true
	IsEmbed *bool `json:"is_embed,omitempty"`

	// Folder is the root embed shared folder
	// Read Only: true
	IsEmbedSharedRoot *bool `json:"is_embed_shared_root,omitempty"`

	// Folder is the root embed users folder
	// Read Only: true
	IsEmbedUsersRoot *bool `json:"is_embed_users_root,omitempty"`

	// Folder is a user's personal folder
	// Read Only: true
	IsPersonal *bool `json:"is_personal,omitempty"`

	// Folder is descendant of a user's personal folder
	// Read Only: true
	IsPersonalDescendant *bool `json:"is_personal_descendant,omitempty"`

	// Folder is the root shared folder
	// Read Only: true
	IsSharedRoot *bool `json:"is_shared_root,omitempty"`

	// Folder is the root user folder
	// Read Only: true
	IsUsersRoot *bool `json:"is_users_root,omitempty"`

	// Looks
	// Read Only: true
	Looks []*LookWithDashboards `json:"looks"`

	// Unique Name
	// Required: true
	Name *string `json:"name"`

	// Id of Parent. If the parent id is null, this is a root-level entry
	ParentID string `json:"parent_id,omitempty"`
}

// Validate validates this folder
func (m *Folder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Folder) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Folder) validateDashboards(formats strfmt.Registry) error {
	if swag.IsZero(m.Dashboards) { // not required
		return nil
	}

	for i := 0; i < len(m.Dashboards); i++ {
		if swag.IsZero(m.Dashboards[i]) { // not required
			continue
		}

		if m.Dashboards[i] != nil {
			if err := m.Dashboards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Folder) validateLooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Looks) { // not required
		return nil
	}

	for i := 0; i < len(m.Looks); i++ {
		if swag.IsZero(m.Looks[i]) { // not required
			continue
		}

		if m.Looks[i] != nil {
			if err := m.Looks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("looks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Folder) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this folder based on the context it is used
func (m *Folder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentMetadataID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsEmbed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsEmbedSharedRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsEmbedUsersRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPersonal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPersonalDescendant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSharedRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsUsersRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Folder) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Folder) contextValidateChildCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "child_count", "body", int64(m.ChildCount)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateContentMetadataID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "content_metadata_id", "body", int64(m.ContentMetadataID)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creator_id", "body", int64(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateDashboards(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboards", "body", []*DashboardBase(m.Dashboards)); err != nil {
		return err
	}

	for i := 0; i < len(m.Dashboards); i++ {

		if m.Dashboards[i] != nil {
			if err := m.Dashboards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dashboards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Folder) contextValidateExternalID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "external_id", "body", string(m.ExternalID)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsEmbed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_embed", "body", m.IsEmbed); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsEmbedSharedRoot(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_embed_shared_root", "body", m.IsEmbedSharedRoot); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsEmbedUsersRoot(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_embed_users_root", "body", m.IsEmbedUsersRoot); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsPersonal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_personal", "body", m.IsPersonal); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsPersonalDescendant(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_personal_descendant", "body", m.IsPersonalDescendant); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsSharedRoot(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_shared_root", "body", m.IsSharedRoot); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateIsUsersRoot(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_users_root", "body", m.IsUsersRoot); err != nil {
		return err
	}

	return nil
}

func (m *Folder) contextValidateLooks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "looks", "body", []*LookWithDashboards(m.Looks)); err != nil {
		return err
	}

	for i := 0; i < len(m.Looks); i++ {

		if m.Looks[i] != nil {
			if err := m.Looks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("looks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Folder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Folder) UnmarshalBinary(b []byte) error {
	var res Folder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
