// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentMetaGroupUser content meta group user
//
// swagger:model ContentMetaGroupUser
type ContentMetaGroupUser struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Id of associated Content Metadata
	// Read Only: true
	ContentMetadataID string `json:"content_metadata_id,omitempty"`

	// ID of associated group
	// Read Only: true
	GroupID int64 `json:"group_id,omitempty"`

	// Unique Id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Type of permission: "view" or "edit" Valid values are: "view", "edit".
	// Read Only: true
	PermissionType string `json:"permission_type,omitempty"`

	// ID of associated user
	// Read Only: true
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this content meta group user
func (m *ContentMetaGroupUser) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this content meta group user based on the context it is used
func (m *ContentMetaGroupUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentMetadataID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentMetaGroupUser) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ContentMetaGroupUser) contextValidateContentMetadataID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "content_metadata_id", "body", string(m.ContentMetadataID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMetaGroupUser) contextValidateGroupID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "group_id", "body", int64(m.GroupID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMetaGroupUser) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMetaGroupUser) contextValidatePermissionType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "permission_type", "body", string(m.PermissionType)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMetaGroupUser) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "user_id", "body", int64(m.UserID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentMetaGroupUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentMetaGroupUser) UnmarshalBinary(b []byte) error {
	var res ContentMetaGroupUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
