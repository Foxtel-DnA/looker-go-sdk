// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFavorite content favorite
//
// swagger:model ContentFavorite
type ContentFavorite struct {

	// Content Metadata Id associated with this ContentFavorite
	ContentMetadataID int64 `json:"content_metadata_id,omitempty"`

	// Associated Dashboard
	// Read Only: true
	Dashboard *DashboardBase `json:"dashboard,omitempty"`

	// Id of a dashboard
	// Read Only: true
	DashboardID int64 `json:"dashboard_id,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Associated Look
	// Read Only: true
	Look *LookBasic `json:"look,omitempty"`

	// Id of a look
	// Read Only: true
	LookID int64 `json:"look_id,omitempty"`

	// User Id which owns this ContentFavorite
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this content favorite
func (m *ContentFavorite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLook(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFavorite) validateDashboard(formats strfmt.Registry) error {
	if swag.IsZero(m.Dashboard) { // not required
		return nil
	}

	if m.Dashboard != nil {
		if err := m.Dashboard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *ContentFavorite) validateLook(formats strfmt.Registry) error {
	if swag.IsZero(m.Look) { // not required
		return nil
	}

	if m.Look != nil {
		if err := m.Look.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("look")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this content favorite based on the context it is used
func (m *ContentFavorite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDashboard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFavorite) contextValidateDashboard(ctx context.Context, formats strfmt.Registry) error {

	if m.Dashboard != nil {
		if err := m.Dashboard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboard")
			}
			return err
		}
	}

	return nil
}

func (m *ContentFavorite) contextValidateDashboardID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_id", "body", int64(m.DashboardID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentFavorite) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentFavorite) contextValidateLook(ctx context.Context, formats strfmt.Registry) error {

	if m.Look != nil {
		if err := m.Look.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("look")
			}
			return err
		}
	}

	return nil
}

func (m *ContentFavorite) contextValidateLookID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "look_id", "body", int64(m.LookID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentFavorite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFavorite) UnmarshalBinary(b []byte) error {
	var res ContentFavorite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
