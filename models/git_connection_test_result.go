// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitConnectionTestResult git connection test result
//
// swagger:model GitConnectionTestResult
type GitConnectionTestResult struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// A short string, uniquely naming this test
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Additional data from the test
	// Read Only: true
	Message string `json:"message,omitempty"`

	// Either 'pass' or 'fail'
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// Validate validates this git connection test result
func (m *GitConnectionTestResult) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this git connection test result based on the context it is used
func (m *GitConnectionTestResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitConnectionTestResult) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GitConnectionTestResult) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *GitConnectionTestResult) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}

func (m *GitConnectionTestResult) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitConnectionTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitConnectionTestResult) UnmarshalBinary(b []byte) error {
	var res GitConnectionTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
