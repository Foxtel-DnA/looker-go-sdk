// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationHub integration hub
//
// swagger:model IntegrationHub
type IntegrationHub struct {

	// (Write-Only) An authorization key that will be sent to the integration hub on every request.
	AuthorizationToken string `json:"authorization_token,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.
	// Read Only: true
	FetchErrorMessage string `json:"fetch_error_message,omitempty"`

	// Whether the authorization_token is set for the hub.
	// Read Only: true
	HasAuthorizationToken *bool `json:"has_authorization_token,omitempty"`

	// ID of the hub.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Label of the hub.
	// Read Only: true
	Label string `json:"label,omitempty"`

	// Whether the legal terms for the integration hub are required before use.
	// Read Only: true
	LegalAgreementRequired *bool `json:"legal_agreement_required,omitempty"`

	// Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.
	// Read Only: true
	LegalAgreementSigned *bool `json:"legal_agreement_signed,omitempty"`

	// The legal agreement text for this integration hub.
	// Read Only: true
	LegalAgreementText string `json:"legal_agreement_text,omitempty"`

	// Whether this hub is a first-party integration hub operated by Looker.
	// Read Only: true
	Official *bool `json:"official,omitempty"`

	// URL of the hub.
	URL string `json:"url,omitempty"`
}

// Validate validates this integration hub
func (m *IntegrationHub) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this integration hub based on the context it is used
func (m *IntegrationHub) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFetchErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHasAuthorizationToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegalAgreementRequired(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegalAgreementSigned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegalAgreementText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficial(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationHub) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *IntegrationHub) contextValidateFetchErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fetch_error_message", "body", string(m.FetchErrorMessage)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateHasAuthorizationToken(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "has_authorization_token", "body", m.HasAuthorizationToken); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateLabel(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "label", "body", string(m.Label)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateLegalAgreementRequired(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "legal_agreement_required", "body", m.LegalAgreementRequired); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateLegalAgreementSigned(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "legal_agreement_signed", "body", m.LegalAgreementSigned); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateLegalAgreementText(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "legal_agreement_text", "body", string(m.LegalAgreementText)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationHub) contextValidateOfficial(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "official", "body", m.Official); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationHub) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationHub) UnmarshalBinary(b []byte) error {
	var res IntegrationHub
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
