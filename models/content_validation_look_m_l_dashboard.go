// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentValidationLookMLDashboard content validation look m l dashboard
//
// swagger:model ContentValidationLookMLDashboard
type ContentValidationLookMLDashboard struct {

	// ID of the LookML Dashboard
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Space
	// Read Only: true
	Space *SpaceBase `json:"space,omitempty"`

	// ID of Space
	// Read Only: true
	SpaceID string `json:"space_id,omitempty"`

	// Title of the LookML Dashboard
	// Read Only: true
	Title string `json:"title,omitempty"`
}

// Validate validates this content validation look m l dashboard
func (m *ContentValidationLookMLDashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentValidationLookMLDashboard) validateSpace(formats strfmt.Registry) error {
	if swag.IsZero(m.Space) { // not required
		return nil
	}

	if m.Space != nil {
		if err := m.Space.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this content validation look m l dashboard based on the context it is used
func (m *ContentValidationLookMLDashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentValidationLookMLDashboard) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentValidationLookMLDashboard) contextValidateSpace(ctx context.Context, formats strfmt.Registry) error {

	if m.Space != nil {
		if err := m.Space.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("space")
			}
			return err
		}
	}

	return nil
}

func (m *ContentValidationLookMLDashboard) contextValidateSpaceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "space_id", "body", string(m.SpaceID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentValidationLookMLDashboard) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "title", "body", string(m.Title)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentValidationLookMLDashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentValidationLookMLDashboard) UnmarshalBinary(b []byte) error {
	var res ContentValidationLookMLDashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
