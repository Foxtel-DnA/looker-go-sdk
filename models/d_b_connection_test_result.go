// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DBConnectionTestResult d b connection test result
//
// swagger:model DBConnectionTestResult
type DBConnectionTestResult struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// JDBC connection string. (only populated in the 'connect' test)
	// Read Only: true
	ConnectionString string `json:"connection_string,omitempty"`

	// Result message of test
	// Read Only: true
	Message string `json:"message,omitempty"`

	// Name of test
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Result code of test
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// Validate validates this d b connection test result
func (m *DBConnectionTestResult) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this d b connection test result based on the context it is used
func (m *DBConnectionTestResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectionString(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DBConnectionTestResult) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *DBConnectionTestResult) contextValidateConnectionString(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "connection_string", "body", string(m.ConnectionString)); err != nil {
		return err
	}

	return nil
}

func (m *DBConnectionTestResult) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}

func (m *DBConnectionTestResult) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *DBConnectionTestResult) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DBConnectionTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DBConnectionTestResult) UnmarshalBinary(b []byte) error {
	var res DBConnectionTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
