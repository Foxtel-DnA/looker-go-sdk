// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPublic user public
//
// swagger:model UserPublic
type UserPublic struct {

	// URL for the avatar image (may be generic)
	// Read Only: true
	// Format: uri
	AvatarURL strfmt.URI `json:"avatar_url,omitempty"`

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Full name for display (available only if both first_name and last_name are set)
	// Read Only: true
	DisplayName string `json:"display_name,omitempty"`

	// First Name
	// Read Only: true
	FirstName string `json:"first_name,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last Name
	// Read Only: true
	LastName string `json:"last_name,omitempty"`

	// Link to get this item
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this user public
func (m *UserPublic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPublic) validateAvatarURL(formats strfmt.Registry) error {
	if swag.IsZero(m.AvatarURL) { // not required
		return nil
	}

	if err := validate.FormatOf("avatar_url", "body", "uri", m.AvatarURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user public based on the context it is used
func (m *UserPublic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvatarURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPublic) contextValidateAvatarURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "avatar_url", "body", strfmt.URI(m.AvatarURL)); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UserPublic) contextValidateDisplayName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display_name", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) contextValidateFirstName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "first_name", "body", string(m.FirstName)); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) contextValidateLastName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_name", "body", string(m.LastName)); err != nil {
		return err
	}

	return nil
}

func (m *UserPublic) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPublic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPublic) UnmarshalBinary(b []byte) error {
	var res UserPublic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
