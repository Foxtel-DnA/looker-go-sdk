// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAttribute user attribute
//
// swagger:model UserAttribute
type UserAttribute struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Default value for when no value is set on the user
	DefaultValue string `json:"default_value,omitempty"`

	// Destinations to which a hidden attribute may be sent. Once set, cannot be edited.
	HiddenValueDomainWhitelist string `json:"hidden_value_domain_whitelist,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Attribute is permanent and cannot be deleted
	// Read Only: true
	IsPermanent *bool `json:"is_permanent,omitempty"`

	// Attribute is a system default
	// Read Only: true
	IsSystem *bool `json:"is_system,omitempty"`

	// Human-friendly label for user attribute
	Label string `json:"label,omitempty"`

	// Name of user attribute
	Name string `json:"name,omitempty"`

	// Type of user attribute ("string", "number", "datetime", "yesno", "zipcode")
	Type string `json:"type,omitempty"`

	// Users can change the value of this attribute for themselves
	UserCanEdit bool `json:"user_can_edit,omitempty"`

	// Non-admin users can see the values of their attributes and use them in filters
	UserCanView bool `json:"user_can_view,omitempty"`

	// If true, users will not be able to view values of this attribute
	ValueIsHidden bool `json:"value_is_hidden,omitempty"`
}

// Validate validates this user attribute
func (m *UserAttribute) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this user attribute based on the context it is used
func (m *UserAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsPermanent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAttribute) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *UserAttribute) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UserAttribute) contextValidateIsPermanent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_permanent", "body", m.IsPermanent); err != nil {
		return err
	}

	return nil
}

func (m *UserAttribute) contextValidateIsSystem(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_system", "body", m.IsSystem); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAttribute) UnmarshalBinary(b []byte) error {
	var res UserAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
