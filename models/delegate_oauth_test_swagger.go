// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DelegateOauthTest delegate oauth test
//
// swagger:model DelegateOauthTest
type DelegateOauthTest struct {

	// Installation ID
	// Read Only: true
	InstallationID int64 `json:"installation_id,omitempty"`

	// The ID of the installation target. For Slack, this would be workspace id.
	// Read Only: true
	InstallationTargetID string `json:"installation_target_id,omitempty"`

	// Delegate Oauth Connection Name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Whether or not the test was successful
	// Read Only: true
	Success *bool `json:"success,omitempty"`
}

// Validate validates this delegate oauth test
func (m *DelegateOauthTest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this delegate oauth test based on the context it is used
func (m *DelegateOauthTest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstallationID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallationTargetID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelegateOauthTest) contextValidateInstallationID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "installation_id", "body", int64(m.InstallationID)); err != nil {
		return err
	}

	return nil
}

func (m *DelegateOauthTest) contextValidateInstallationTargetID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "installation_target_id", "body", string(m.InstallationTargetID)); err != nil {
		return err
	}

	return nil
}

func (m *DelegateOauthTest) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *DelegateOauthTest) contextValidateSuccess(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DelegateOauthTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelegateOauthTest) UnmarshalBinary(b []byte) error {
	var res DelegateOauthTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
