// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RenderTask render task
//
// swagger:model RenderTask
type RenderTask struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Date/Time render task was created
	// Read Only: true
	CreatedAt string `json:"created_at,omitempty"`

	// Filter values to apply to the dashboard queries, in URL query format
	// Read Only: true
	DashboardFilters string `json:"dashboard_filters,omitempty"`

	// Id of dashboard to render
	// Read Only: true
	DashboardID int64 `json:"dashboard_id,omitempty"`

	// Dashboard layout style: single_column or tiled
	// Read Only: true
	DashboardStyle string `json:"dashboard_style,omitempty"`

	// Date/Time render task was completed
	// Read Only: true
	FinalizedAt string `json:"finalized_at,omitempty"`

	// Output height in pixels. Flowed layouts may ignore this value.
	// Read Only: true
	Height int64 `json:"height,omitempty"`

	// Id of this render task
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Id of look to render
	// Read Only: true
	LookID int64 `json:"look_id,omitempty"`

	// Id of lookml dashboard to render
	// Read Only: true
	LookmlDashboardID string `json:"lookml_dashboard_id,omitempty"`

	// Id of query to render
	// Read Only: true
	QueryID int64 `json:"query_id,omitempty"`

	// Number of seconds elapsed running queries
	// Read Only: true
	QueryRuntime float64 `json:"query_runtime,omitempty"`

	// Number of seconds elapsed rendering data
	// Read Only: true
	RenderRuntime float64 `json:"render_runtime,omitempty"`

	// Output format: pdf, png, or jpg
	// Read Only: true
	ResultFormat string `json:"result_format,omitempty"`

	// Total seconds elapsed for render task
	// Read Only: true
	Runtime float64 `json:"runtime,omitempty"`

	// Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
	// Read Only: true
	Status string `json:"status,omitempty"`

	// Additional information about the current status
	// Read Only: true
	StatusDetail string `json:"status_detail,omitempty"`

	// The user account permissions in which the render task will execute
	// Read Only: true
	UserID int64 `json:"user_id,omitempty"`

	// Output width in pixels
	// Read Only: true
	Width int64 `json:"width,omitempty"`
}

// Validate validates this render task
func (m *RenderTask) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this render task based on the context it is used
func (m *RenderTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardStyle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinalizedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookmlDashboardID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRenderRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResultFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWidth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RenderTask) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *RenderTask) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created_at", "body", string(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateDashboardFilters(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_filters", "body", string(m.DashboardFilters)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateDashboardID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_id", "body", int64(m.DashboardID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateDashboardStyle(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_style", "body", string(m.DashboardStyle)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateFinalizedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "finalized_at", "body", string(m.FinalizedAt)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "height", "body", int64(m.Height)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateLookID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "look_id", "body", int64(m.LookID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateLookmlDashboardID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lookml_dashboard_id", "body", string(m.LookmlDashboardID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateQueryID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "query_id", "body", int64(m.QueryID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateQueryRuntime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "query_runtime", "body", float64(m.QueryRuntime)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateRenderRuntime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "render_runtime", "body", float64(m.RenderRuntime)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateResultFormat(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "result_format", "body", string(m.ResultFormat)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateRuntime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "runtime", "body", float64(m.Runtime)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateStatusDetail(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status_detail", "body", string(m.StatusDetail)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "user_id", "body", int64(m.UserID)); err != nil {
		return err
	}

	return nil
}

func (m *RenderTask) contextValidateWidth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "width", "body", int64(m.Width)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RenderTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RenderTask) UnmarshalBinary(b []byte) error {
	var res RenderTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
