// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentMeta content meta
//
// swagger:model ContentMeta
type ContentMeta struct {

	// Operations the current user is able to perform on this object
	// Read Only: true
	Can map[string]bool `json:"can,omitempty"`

	// Content Type ("dashboard", "look", or "space")
	// Read Only: true
	ContentType string `json:"content_type,omitempty"`

	// Id of associated dashboard when content_type is "dashboard"
	// Read Only: true
	DashboardID string `json:"dashboard_id,omitempty"`

	// Id of associated folder when content_type is "space"
	// Read Only: true
	FolderID string `json:"folder_id,omitempty"`

	// Unique Id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Id of Inherited Content
	// Read Only: true
	InheritingID int64 `json:"inheriting_id,omitempty"`

	// Whether content inherits its access levels from parent
	Inherits bool `json:"inherits,omitempty"`

	// Id of associated look when content_type is "look"
	// Read Only: true
	LookID int64 `json:"look_id,omitempty"`

	// Name or title of underlying content
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Id of Parent Content
	// Read Only: true
	ParentID int64 `json:"parent_id,omitempty"`

	// Content Slug
	// Read Only: true
	Slug string `json:"slug,omitempty"`

	// Id of associated space when content_type is "space"
	// Read Only: true
	SpaceID string `json:"space_id,omitempty"`
}

// Validate validates this content meta
func (m *ContentMeta) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this content meta based on the context it is used
func (m *ContentMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFolderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInheritingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlug(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentMeta) contextValidateCan(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ContentMeta) contextValidateContentType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "content_type", "body", string(m.ContentType)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateDashboardID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_id", "body", string(m.DashboardID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateFolderID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "folder_id", "body", string(m.FolderID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateInheritingID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inheriting_id", "body", int64(m.InheritingID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateLookID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "look_id", "body", int64(m.LookID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateParentID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "parent_id", "body", int64(m.ParentID)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateSlug(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "slug", "body", string(m.Slug)); err != nil {
		return err
	}

	return nil
}

func (m *ContentMeta) contextValidateSpaceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "space_id", "body", string(m.SpaceID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentMeta) UnmarshalBinary(b []byte) error {
	var res ContentMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
