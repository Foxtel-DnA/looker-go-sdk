// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardLookml dashboard lookml
//
// swagger:model DashboardLookml
type DashboardLookml struct {

	// Id of Dashboard
	// Read Only: true
	DashboardID string `json:"dashboard_id,omitempty"`

	// lookml of UDD
	// Read Only: true
	Lookml string `json:"lookml,omitempty"`
}

// Validate validates this dashboard lookml
func (m *DashboardLookml) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this dashboard lookml based on the context it is used
func (m *DashboardLookml) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDashboardID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLookml(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardLookml) contextValidateDashboardID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dashboard_id", "body", string(m.DashboardID)); err != nil {
		return err
	}

	return nil
}

func (m *DashboardLookml) contextValidateLookml(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lookml", "body", string(m.Lookml)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardLookml) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardLookml) UnmarshalBinary(b []byte) error {
	var res DashboardLookml
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
